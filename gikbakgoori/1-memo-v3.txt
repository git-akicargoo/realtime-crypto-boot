# Exchange Service 구현 계획 (v3)

## 1. 현재 상태 [모두 완료]
### Layer 1 - Core [완료]
- [✓] 기본 모델 정의
- [✓] 프로토콜 정의
- [✓] 공통 유틸리티

### Layer 2 - WebSocket [완료]
- [✓] 웹소켓 연결 관리
- [✓] 메시지 송수신
- [✓] 재연결 처리

### Layer 3 - Data Converter [완료]
- [✓] 표준화된 데이터 모델
- [✓] 데이터 변환 인터페이스
- [✓] 거래소별 변환 로직
- [✓] 통합 변환 서비스

### Layer 4 - Distribution [완료]
- [✓] Kafka 기반 분배
- [✓] Direct 모드 지원
- [✓] 헬스체크 시스템
- [✓] 자동 재연결 메커니즘

### Layer 5 - Price Cache [신규]

#### 1. 실행 모드
- Kafka + Redis 모드만 지원
  - 환경: 실 서비스 운영
  - 특징
    - Redis 캐시 사용
    - 실시간 가격 처리
    - 고성능 데이터 접근
    - 기존 헬스체크/재연결 메커니즘 활용

#### 2. 데이터 흐름
```
[거래소 WebSocket] → [ExchangeDataIntegrationService]
                              ↓
                    [KafkaDistributionService]
                              ↓
                      [KafkaConsumer]
                              ↓
                    [PriceDataService] ←→ [HealthCheckService]
                              ↓
                      [Redis Cache]
```

#### 3. 패키지 구조
```
com.example.boot.exchange
├── layer1_core           # 핵심 모델 및 유틸리티
│   └── model
│       └── CurrencyPair.java
├── layer2_websocket      # WebSocket 연결 관리
├── layer3_data_converter # 데이터 변환
│   └── model
│       └── StandardExchangeData.java
├── layer4_distribution   # 데이터 분배
│   ├── kafka            # Kafka 기반 분배
│   └── direct           # 직접 분배
└── layer5_price_cache   # 가격 데이터 캐싱
    ├── model
    │   └── PriceData.java
    ├── cache
    │   └── redis        # Redis 캐시만 지원
    │       └── RedisPriceCache.java
    └── service
        └── PriceDataService.java

com.example.boot.trading  # 거래 전략 서비스
├── arbitrage            # 재정거래
└── shortterm           # 단타거래

com.example.boot.web     # 웹 인터페이스
```

#### 4. 주요 기능
1. 캐시 관리
   - Redis 기반 가격 데이터 캐싱
   - TTL 기반 데이터 관리
   - 벌크 연산 지원

2. 상태 관리
   - 기존 헬스체크 시스템 통합
   - Redis 연결 상태 모니터링
   - 자동 재연결 메커니즘

3. 모니터링
   - 캐시 히트율 추적
   - 응답시간 모니터링
   - 에러율 모니터링
   - 기존 모니터링 시스템 통합

4. 운영 관리
   - Redis 클러스터 지원
   - 데이터 백업/복구
   - 보안 설정 (접근 제어, 암호화)

#### 5. 구현 우선순위
1. 기본 기능 구현 [1주차]
   - Redis 캐시 구현
   - 헬스체크 통합
   - 기본 모니터링

2. 성능 최적화 [2주차]
   - 벌크 연산 구현
   - 캐시 키 최적화
   - 성능 테스트

3. 운영 기능 [3주차]
   - 클러스터 설정
   - 백업/복구
   - 보안 설정

## 2. 프론트엔드 구현 계획 [생략...] 