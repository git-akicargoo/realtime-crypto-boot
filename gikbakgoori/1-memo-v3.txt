Layer 5 - Price Cache 먼저 구현
[✓] Redis 연동
    - RedisConfig: Redis 연결 설정 (Lettuce)
    - RedisTemplate 설정 (String 직렬화)
[✓] 모드 관리 (Kafka + Redis)
    - TradingModeService: Kafka/Redis 상태 체크
    - 리더 노드 확인 및 모드 전환
[✓] 캐시 상태 체크
    - RedisHealthIndicator: 10초마다 연결 상태 체크
    - RedisCacheMonitor: 캐시 상태/연산/에러 모니터링
[✓] 기본 데이터 캐싱 구조
    - RedisCacheService: 30분 윈도우, 1000개 데이터 포인트
    - PriceCacheEventListener: Kafka 이벤트 수신 및 캐싱
[ ] 모의 거래의 기본 구조 구현
[ ] 캐시된 데이터 기반 거래 처리
[ ] 기본적인 거래 이력 저장
[ ] 웹소켓 핸들러 확장
[ ] 기존 핸들러에 모드 체크 추가
[ ] 거래 관련 메시지 처리
=========================================================================================




# Exchange Service 구현 계획 (v3)

## 1. 현재 상태 [모두 완료]
### Layer 1 - Core [완료]
- [✓] 기본 모델 정의
- [✓] 프로토콜 정의
- [✓] 공통 유틸리티

### Layer 2 - WebSocket [완료]
- [✓] 웹소켓 연결 관리
- [✓] 메시지 송수신
- [✓] 재연결 처리

### Layer 3 - Data Converter [완료]
- [✓] 표준화된 데이터 모델
- [✓] 데이터 변환 인터페이스
- [✓] 거래소별 변환 로직
- [✓] 통합 변환 서비스

### Layer 4 - Distribution [완료]
- [✓] Kafka 기반 분배
- [✓] Direct 모드 지원
- [✓] 헬스체크 시스템
- [✓] 자동 재연결 메커니즘

### Layer 5 - Price Cache [분석용]

#### 1. 실행 모드 [진행 중]
- Kafka + Redis 모드
  - [✓] Redis 캐시 연동
  - [✓] Kafka 이벤트 수신
  - [✓] 리더 노드 기반 캐시 관리
  - [ ] 실시간 거래 처리

#### 2. 실행 조건 [구현 완료]
- 필수 인프라
  - [✓] Redis 서버 연결 및 상태 체크
  - [✓] Kafka 연결 및 이벤트 수신
  - [✓] 리더 노드 확인

#### 3. 데이터 흐름 [부분 구현]
```
[거래소 WebSocket] → [ExchangeDataIntegrationService]
            ↓
[KafkaDistributionService]
            ↓
[✓] PriceCacheEventListener
            ↓
[✓] RedisCacheService (분석용 캐시)
            ↓
[ ] 거래 분석/처리
            ↓
[ ] 거래 실행/기록
```

#### 4. 주요 기능
1. 분석용 캐시 관리 [기본 구현]
   - [✓] 30분 분석 윈도우 설정
   - [✓] 최대 1000개 데이터 포인트 제한
   - [✓] 시계열 데이터 저장
   - [✓] 기본 통계 정보 (lastPrice, lastUpdate)
   - [ ] 고급 통계 분석

2. 상태 관리 [구현 완료]
   - [✓] Redis 연결 상태 체크 (10초 간격)
   - [✓] 캐시 작업 모니터링
   - [✓] 에러 추적
   - [✓] 리더/팔로워 역할 구분

3. 거래 분석 시스템 [미구현]
   - [ ] 시계열 데이터 분석
   - [ ] 거래 패턴 감지
   - [ ] 가격 변동성 분석
   - [ ] 거래량 분석

4. 자동매매 시스템
   - 실시간 거래: Kafka 직접 사용
   - 분석 기반 거래 결정
   - 거래 전략 실행
   - 포지션 관리

5. 거래 이력 관리
   - 거래 기록 저장
   - 성과 분석
   - 전략별 통계

#### 5. 패키지 구조
```
com.example.boot
├── trading
│   ├── analysis
│   │   ├── service
│   │   │   └── TradingAnalysisService.java
│   │   └── model
│   │       ├── PricePattern.java
│   │       └── VolumeAnalysis.java
│   ├── strategy
│   │   └── service
│   │       └── TradingStrategyService.java
│   └── execution
│       └── service
│           └── TradeExecutionService.java
│
└── exchange
    └── layer5_price_cache
        ├── redis
        │   ├── config
        │   │   └── RedisConfig.java
        │   ├── service
        │   │   └── RedisCacheService.java
        │   ├── monitor
        │   │   └── RedisCacheMonitor.java
        │   └── health
        │       └── RedisHealthIndicator.java
        └── mode
            └── service
                └── TradingModeService.java
```

#### 6. 구현 우선순위
1. 기본 기능 [완료]
   - [✓] Redis 연동
   - [✓] 상태 체크
   - [✓] 분석용 캐시 구현

2. 분석 시스템 [진행중]
   - [ ] 시계열 데이터 분석
   - [ ] 거래 패턴 감지
   - [ ] 전략 실행 엔진

3. 자동매매 시스템 [예정]
   - [ ] 실시간 거래 처리
   - [ ] 분석 기반 거래
   - [ ] 포지션 관리

4. 안정화 [예정]
   - [ ] 오류 처리 보강
   - [ ] 성능 최적화
   - [ ] 모니터링 강화

#### 7. 패키지 구조

```
com.example.boot
├── web                                    # 기존 웹 패키지
│   └── websocket
│       ├── config
│       │   └── WebSocketConfig.java       # 기존 설정
│       └── handler
│           └── FrontendWebSocketHandler.java  # 기존 핸들러 확장
│
├── trading                                # 모의 트레이딩 모듈
│   ├── config
│   │   └── TradingConfig.java
│   ├── service
│   │   └── AutoTradingService.java
│   ├── strategy
│   │   ├── ArbitrageStrategy.java
│   │   └── ScalpingStrategy.java
│   ├── persistence                        # 트레이딩 관련 영속성
│   │   ├── repository
│   │   │   └── TradeHistoryRepository.java
│   │   └── entity
│   │       └── TradeHistory.java
│   │
│   └── model
│       ├── TradeStrategy.java
│       └── TradePosition.java
│
└── exchange
    └── layer5_price_cache                 # 캐시 전용 레이어
        ├── common
        │   ├── event
        │   │   └── PriceDataEvent.java
        │   └── model
        │       └── CacheEntry.java
        ├── mode
        │   ├── service
        │   │   └── TradingModeService.java
        │   ├── validator
        │   │   ├── KafkaModeValidator.java
        │   │   └── RedisModeValidator.java
        │   └── model
        │       └── TradingMode.java
        └── redis
            ├── config
            │   └── RedisConfig.java
            ├── service
            │   └── RedisCacheService.java
            └── health
                └── RedisHealthIndicator.java
```

#### 8. 의존성 관계
1. Layer5 (Price Cache)
   - 주요 책임: 가격 데이터 캐싱
   - 의존성:
     - KafkaDistributionService (layer4)
     - AutoTradingService (DI)
     - WebSocket 핸들러 (기존)

2. Trading 모듈
   - 주요 책임: 모의 트레이딩 로직
   - 의존성:
     - RedisCacheService (layer5)
     - 자체 DB 저장소

3. Web 모듈
   - 주요 책임: 프론트엔드 통신
   - 의존성:
     - TradingModeService (layer5)
     - AutoTradingService

#### 9. 구현 체크리스트

##### Layer 5 - Price Cache
- [ ] Redis 연동
  - [ ] RedisConfig 구현
  - [ ] RedisCacheService 구현
  - [ ] RedisHealthIndicator 구현
  - [ ] 캐시 TTL 설정 (5분)

- [ ] 모드 관리
  - [ ] TradingModeService 구현
  - [ ] KafkaModeValidator 구현
  - [ ] RedisModeValidator 구현
  - [ ] 모드 변경 이벤트 처리

- [ ] 이벤트 처리
  - [ ] PriceDataEvent 구현
  - [ ] 캐시 업데이트 로직
  - [ ] 상태 변경 이벤트

##### Trading 모듈
- [ ] 기본 구조
  - [ ] AutoTradingService 구현
  - [ ] TradeStrategy 인터페이스 정의
  - [ ] 기본 엔티티 구현

- [ ] 전략 구현
  - [ ] ArbitrageStrategy 구현
  - [ ] ScalpingStrategy 구현

- [ ] 데이터 저장
  - [ ] TradeHistoryRepository 구현
  - [ ] JPA 엔티티 매핑
  - [ ] 거래 이력 저장 로직

##### WebSocket 확장
- [ ] 기존 핸들러 확장
  - [ ] 모드 상태 체크 메시지 처리
  - [ ] 전략 설정 메시지 처리
  - [ ] 에러 처리 추가

- [ ] 프론트엔드 연동
  - [ ] 상태 API 구현
  - [ ] 웹소켓 메시지 타입 정의
  - [ ] UI 상태 관리

##### 모니터링
- [ ] 캐시 상태 모니터링
  - [ ] 헬스체크 로깅
  - [ ] 성능 메트릭 수집
  - [ ] 상태 리포팅

##### 테스트
- [ ] 단위 테스트
  - [ ] Redis 캐시 테스트
  - [ ] 모드 관리 테스트
  - [ ] 전략 로직 테스트

- [ ] 통합 테스트
  - [ ] 웹소켓 통신 테스트
  - [ ] 캐시-트레이딩 연동 테스트
  - [ ] 전체 플로우 테스트

#### 10. 거래 전략 상세 설계

##### 1. 모의 거래 처리 방식
1. 데이터 소스
   - Redis 캐시의 실시간 가격 데이터 사용
   - 실제 거래소 API 호출 없음
   - 캐시된 가격 기준으로 모의 체결 처리

2. 모의 거래 실행
   - 매수/매도 주문 생성
     - 현재 캐시된 가격 기준
     - 수수료 시뮬레이션
     - 즉시 체결 가정
   - 포지션 관리
     - 가상 잔고 관리
     - 미체결 주문 없음 (즉시 체결)
     - 수익/손실 실시간 계산

##### 2. 자동매매 스케줄 관리
1. 스케줄 설정
   - 전략 유형 선택 (스캘핑/재정거래)
   - 전략별 파라미터 설정
   - 실행 조건 설정
     - 시작 시간
     - 종료 조건 (시간/수익률/손실률)
     - 최대 거래 횟수
2. 실행 이력 관리
   - 스케줄별 실행 정보
     - 스케줄 ID
     - 전략 정보
     - 설정 파라미터
     - 실행 상태 (실행 중/종료)
   - 거래 이력
     - 스케줄 ID 기준 조회
     - 전체 거래 목록
     - 개별 거래 상세 정보
   - 성과 정보
     - 최종 수익/손실
     - 총 거래 횟수
     - 승률 통계

##### 3. 스캘핑 전략 (단타 거래)
- 설정 파라미터
  - 기본 설정
    - 거래쌍 선택 (BTC/USDT, ETH/USDT 등)
    - 거래 수량 (최소/최대)
    - 투자 금액 한도
  - 진입 조건
    - 가격 변동폭 기준 (%)
    - RSI 지표 기준 (과매수/과매도)
    - 거래량 증가율 기준 (%)
  - 청산 조건
    - 목표 수익률 (%)
    - 손절 수준 (%)
    - 보유 시간 제한 (분)
  - 리스크 관리
    - 최대 포지션 수
    - 일일 최대 거래 횟수
    - 일일 손실 한도

- 실행 로직
```
1. 진입 신호 감지
   - 설정된 가격 변동폭 도달
   - RSI 지표가 기준값 도달
   - 거래량 증가 확인

2. 포지션 진입
   - 현재 가격으로 주문 실행
   - 포지션 정보 기록
   - 손절/익절 주문 설정

3. 모니터링
   - 실시간 수익률 계산
   - 청산 조건 체크
   - 보유 시간 체크

4. 청산 실행
   - 목표가/손절가 도달
   - 시간 제한 도달
   - 수동 청산 요청
```

##### 4. 재정거래 전략
- 설정 파라미터
  - 기본 설정
    - 대상 거래소 쌍 선택
    - 대상 거래쌍 선택
    - 최소 거래 수량
    - 투자 금액 한도
  - 진입 조건
    - 최소 가격차이 (%)
    - 최소 기대수익률 (%)
    - 거래 수수료 고려
  - 리스크 관리
    - 최대 포지션 수
    - 동시 거래 제한
    - 거래소별 한도

- 실행 로직
```
1. 차익 기회 감지
   - 거래소간 가격차 계산
   - 수수료 포함 수익성 계산
   - 유동성 확인

2. 주문 실행
   - 저가 거래소 매수
   - 고가 거래소 매도
   - 주문 상태 추적

3. 포지션 관리
   - 양방향 주문 완료 확인
   - 실제 체결가 기반 수익 계산
   - 미체결 주문 관리

4. 청산 조건
   - 양방향 거래 완료
   - 타임아웃 발생
   - 수동 취소
```

##### 5. UI 구성
1. 스케줄 관리
   - 신규 스케줄 생성
     - 전략 선택
     - 파라미터 설정
     - 실행 조건 설정
   - 스케줄 목록 조회
     - 실행 중인 스케줄
     - 종료된 스케줄
     - 상태별 필터링

2. 실행 이력 조회
   - 스케줄별 조회
     - 기본 정보 (전략/기간/상태)
     - 전체 거래 목록
     - 수익/손실 요약
   - 거래 상세 정보
     - 개별 거래 정보
     - 진입/청산 가격
     - 수익/손실
   - 성과 분석
     - 수익률 차트
     - 거래 통계
     - 승률 분석

3. 모니터링 대시보드
   - 실행 중인 스케줄 현황
   - 실시간 거래 현황
   - 실시간 수익/손실
   - 알림 설정
```

#### 11. 구현 시 고려사항

##### 1. 데이터 정합성
- 문제: Redis 캐시 데이터 유실 가능성
- 해결:
  - 캐시 TTL 적절히 설정 (5분)
  - 캐시 미스 시 거래 중단
  - 캐시 상태 모니터링

##### 2. 모의 거래 처리
- 문제: 실제 거래와 차이 발생
- 제한사항:
  - 즉시 체결 가정 (실제와 다름)
  - 유동성 고려하지 않음
  - 수수료는 단순 계산
- 해결:
  - 이러한 제약사항을 UI에 명시
  - 모의 거래임을 명확히 표시

##### 3. 성능 고려사항
- 문제: 과도한 Redis 부하
- 해결:
  - 캐시 조회 최적화
  - 불필요한 연산 최소화
  - 배치 처리 고려

##### 4. 오류 처리
- 상황별 처리:
  - Redis 연결 끊김
    → 진행 중인 거래 상태 저장
    → 모의 거래 일시 중단
  - Kafka 모드 비활성화
    → 전체 기능 비활성화
  - 리더 노드 변경
    → 캐시 상태 복구 후 재개

##### 5. 현실적 구현 범위
1. 1차 구현 (필수)
   - Redis 캐시 연동
   - 기본 모의 거래 처리
   - 단순 전략 실행
   - 거래 이력 저장

2. 2차 구현 (선택)
   - 복잡한 전략 추가
   - 상세 분석 기능
   - 리포트 기능

##### 6. 테스트 필수사항
1. 기능 테스트
   - Redis 캐시 동작
   - 모의 거래 처리
   - 이력 저장/조회

2. 장애 테스트
   - Redis 연결 끊김
   - Kafka 모드 전환
   - 리더 변경

3. 성능 테스트
   - 동시 실행 전략 수
   - 캐시 처리 속도
   - DB 저장 부하 
