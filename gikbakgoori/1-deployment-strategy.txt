# Exchange Service 배포 전략

## 1. 로컬 개발 환경

### 기본 구성
- 백엔드 서버 (단일 인스턴스)
- 프론트엔드 개발 서버

### 설정
```yaml
spring:
  profiles:
    active: local
  kafka:
    enabled: false

app:
  websocket:
    endpoint: ws://localhost:8080/ws/exchange
```

### 특징
- 단순한 구성으로 빠른 개발/테스트
- 웹소켓 직접 연결
- 모든 기능이 단일 인스턴스에서 동작

## 2. Docker 개발 환경

### 기본 구성
- Nginx (리버스 프록시)
- 백엔드 서버 (2-3개 인스턴스)
- Kafka (선택적)

### Docker Compose 설정
```yaml
version: '3.8'
services:
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend

  backend:
    build: .
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    deploy:
      replicas: 3

  # Kafka는 선택적으로 활성화
  kafka:
    image: confluentinc/cp-kafka:latest
    profiles: ["kafka"]
```

### 특징
- 실제 운영 환경과 유사한 구성
- 로드밸런싱 테스트 가능
- Kafka 없이도 정상 동작

## 3. 운영 환경 (Kubernetes)

### 기본 구성
- Ingress Controller (Nginx)
- Exchange Service Deployment
- MSK (선택적)

### Kubernetes 리소스
1. Deployment
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: exchange-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app: exchange-service
  template:
    metadata:
      labels:
        app: exchange-service
    spec:
      containers:
      - name: exchange-service
        image: ${ECR_REGISTRY}/exchange-service:${TAG}
        ports:
        - containerPort: 8080
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "prod"
        - name: KAFKA_ENABLED
          value: "${KAFKA_ENABLED}"
```

2. Service
```yaml
apiVersion: v1
kind: Service
metadata:
  name: exchange-service
spec:
  selector:
    app: exchange-service
  ports:
  - port: 80
    targetPort: 8080
```

3. Ingress
```yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: exchange-service
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
spec:
  rules:
  - host: ${DOMAIN}
    http:
      paths:
      - path: /ws/exchange
        pathType: Prefix
        backend:
          service:
            name: exchange-service
            port:
              number: 80
```

### 배포 구성
1. 기본 구성 (Kafka 없음)
   ```
   Client -> Ingress -> Service -> Pods
   ```

2. Kafka 활성화 시
   ```
   [리더 Pod]
   거래소 -> Pod -> Kafka

   [팔로워 Pod]
   Kafka -> Pod -> Client
   ```

### 특징
- Rolling Update 지원
- Pod Auto Scaling
- 인프라 장애 시에도 기본 기능 유지
- Liveness/Readiness Probe 통한 헬스체크

## 주요 고려사항

1. 무중단 배포
   - Rolling Update 전략
   - Readiness Probe로 정상 여부 확인
   - 세션 드레이닝 적용

2. 장애 대응
   - Pod 장애: Kubernetes가 자동으로 새 Pod 생성
   - Kafka 장애: WebSocket 모드로 자동 전환
   - 네트워크 장애: 자동 재연결 메커니즘

3. 모니터링
   - Prometheus + Grafana
   - Pod 상태 모니터링
   - 웹소켓 연결 상태 확인
   - 거래소 연결 상태 확인

4. 보안
   - HTTPS/WSS (Cert-Manager)
   - Network Policy
   - RBAC 