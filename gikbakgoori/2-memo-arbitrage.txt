# 차익거래 기회 포착 시스템 구현 계획 (v1)

## 목표
1. 거래소간 코인 가격 차이 모니터링
   - 사용자가 설정한 가격차이 퍼센트 이상일 때 포착
   - 설정한 시간 범위 내의 데이터만 저장
   - 저장된 차익거래 기회 목록 조회 기능

## 구현 전략
### 1. 데이터 저장소 전략
1. 기본 모드 (Default)
   - H2 DB 사용
   - 인메모리 캐시 활용
   - 개발 및 테스트 환경에서 사용

2. 프로덕션 모드 (Production)
   - MySQL DB 사용
   - Redis 캐시 활용 (선택적)
   - 실제 운영 환경에서 사용

### 2. 분산 처리 전략
1. Direct 모드
   - 단일 서버에서 모든 처리
   - 개발 및 테스트에 적합

2. Kafka 모드
   - 분산 환경에서 동작
   - 모든 노드가 동일하게 분석 수행
   - 고가용성 보장

### 3. 캐시 전략
1. 로컬 캐시 모드
   - ConcurrentHashMap 사용
   - Redis 없이도 동작 가능

2. Redis 모드
   - Redis를 주 캐시로 사용
   - 장애시 로컬 캐시로 자동 전환

## 구현 단계
### 1단계: 코어 기능 구현 및 테스트
1. 엔티티 설계 및 JPA 구현
   - [ ] ArbitrageOpportunity 엔티티 구현
   - [ ] Repository 구현
   - [ ] 기본 CRUD 테스트

2. 분석 로직 구현
   - [ ] 차익 계산 로직 구현
   - [ ] 시나리오별 단위 테스트
   ```java
   @Test
   void whenPriceDifferenceExceedsThreshold_thenDetectArbitrage() {
       // given
       var binancePrice = new StandardExchangeData("BTC/USDT", "Binance", 50000);
       var upbitPrice = new StandardExchangeData("BTC/USDT", "Upbit", 51000);
       
       // when
       var opportunity = arbitrageService.analyze(List.of(binancePrice, upbitPrice));
       
       // then
       assertThat(opportunity.getPriceDiffPercent()).isGreaterThan(1.0);
   }
   ```

3. 통합 테스트
   - [ ] H2 DB 기반 통합 테스트
   - [ ] 실시간 데이터 처리 테스트

### 2단계: 캐시 구현
1. 로컬 캐시 구현
   - [ ] ConcurrentHashMap 기반 캐시
   - [ ] 캐시 만료 정책

2. Redis 통합 (선택적)
   - [ ] Redis 설정
   - [ ] 폴백 메커니즘
   - [ ] 캐시 성능 테스트

### 3단계: API 및 프론트엔드
- [ ] REST API 구현
- [ ] 모니터링 UI
- [ ] 설정 관리

## 테스트 전략
### 1. 단위 테스트
- 차익 계산 로직
- 캐시 동작
- 설정값 적용

### 2. 통합 테스트
- DB 연동
- 실시간 데이터 처리
- 캐시 성능

### 3. 시나리오 테스트
- 거래소 장애 상황
- Redis 장애 상황
- 대량 데이터 처리

## 모니터링 및 운영
- [ ] 성능 메트릭 수집
- [ ] 알림 시스템
- [ ] 장애 복구 전략

* 각 체크박스는 구현 완료시 체크 표시 ([✓]) 