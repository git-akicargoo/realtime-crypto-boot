# 암호화폐 분석 시스템 리팩토링 계획

## 1. 문제 분석

현재 시스템의 문제점:
- 웹소켓 컨트롤러(`AnalysisStompController`)에 로직이 집중되어 있음
- 카드 관리 기능과 분석 로직이 혼재되어 있음
- REST API와 WebSocket 간의 책임 분리가 명확하지 않음
- 카드 관리에 대한 별도 레이어 부재
- 일관된 에러 처리 및 응답 체계 미흡
- 중복 분석 검증 로직 부재
- 연속된 시작 요청 처리에 대한 명확한 정책 부재

## 2. 리팩토링 방향

### 2.1 패키지 구조 개선

```
com.example.boot
├── exchange
│   ├── layer1_core
│   │   └── model
│   │       └── CurrencyPair.java
│   └── layer6_analysis
│       ├── dto
│       │   ├── AnalysisRequest.java         # 기존 DTO 유지
│       │   └── AnalysisResponse.java        # 기존 DTO 유지
│       ├── service
│       │   ├── CryptoAnalysisService.java   # 기존 분석 서비스
│       │   └── IndicatorCalculationService.java
│       ├── session_analysis
│       │   ├── AnalysisManager.java         # 분석 세션 관리
│       │   └── AnalysisSessionRegistry.java
│       └── websocket                        # 웹소켓 관련 코드 모두 layer6_analysis에 배치
│           ├── controller
│           │   └── AnalysisStompController.java  # 웹소켓 컨트롤러
│           └── handler
│               └── AnalysisStompHandler.java     # 분석 WebSocket 핸들러
└── web
    ├── card                                 # 카드 관련 패키지 (신규)
    │   ├── controller
    │   │   └── CardController.java          # 카드 CRUD API
    │   └── service
    │       └── CardService.java             # 카드 서비스 (AnalysisStompHandler 활용)
    ├── controller
    │   └── InfrastructureStatusController.java
    └── websocket
        └── config
            └── WebSocketConfig.java         # WebSocket 설정 (간소화)
```

### 2.2 책임 분리

#### 2.2.1 분석 WebSocket 로직 (`layer6_analysis`)
- `AnalysisStompHandler`: 분석 데이터 송수신 및 분석 세션 관리
- `AnalysisStompController`: WebSocket 메시지 엔드포인트 제공

#### 2.2.2 카드 관리 로직 (`web.card`)
- `CardController`: REST API 제공 (카드 CRUD)
- `CardService`: 카드 비즈니스 로직 및 필요 시 분석 서비스 활용

### 2.3 주요 컴포넌트 역할

#### 2.3.1 AnalysisStompHandler (layer6_analysis.websocket.handler)
- 분석 시작/중지 로직 담당
- WebSocket 메시지 전송 메서드 제공
- 분석 데이터 스트림 구독 및 메시지 전송
- 중복 분석 체크 및 기존 분석 재시작 처리
- 카드 ID 자동 생성 및 관리

#### 2.3.2 AnalysisStompController (layer6_analysis.websocket.controller)
- `/app/analysis.start`: 분석 시작 메시지 엔드포인트
- `/app/analysis.stop`: 분석 중지 메시지 엔드포인트
- 인프라 상태 체크 후 핸들러에 작업 위임
- 예외 상황 로깅 및 오류 메시지 전송

#### 2.3.3 CardService (web.card.service)
- 카드 생성, 조회, 수정, 삭제 기능
- 분석 시작/중지 명령 전달 (AnalysisStompHandler 활용)
- 카드 상태 관리 (CREATED, RUNNING, STOPPED, ERROR)

#### 2.3.4 CardController (web.card.controller)
- `/api/cards`: 카드 생성 및 전체 목록 조회
- `/api/cards/{cardId}`: 특정 카드 조회 및 삭제
- 인프라 상태 확인 및 에러 처리

### 2.4 데이터 흐름

#### 2.4.1 카드 생성 및 분석 시작
1. 클라이언트: HTTP POST `/api/cards` 요청
2. 서버: 인프라 상태 확인 후 카드 생성 처리
3. 서버: 중복 분석 체크 및 기존 카드 상태 확인
4. 서버: 분석 시작 및 웹소켓 초기 응답 전송
5. 클라이언트: 카드별 웹소켓 토픽 구독

#### 2.4.2 분석 데이터 전송
1. 서버: CryptoAnalysisService → 데이터 생성
2. 서버: AnalysisStompHandler → 토픽으로 메시지 전송
3. 클라이언트: 구독 중인 토픽에서 데이터 수신

#### 2.4.3 분석 중지
1. 클라이언트: HTTP DELETE `/api/cards/{cardId}` 요청 또는 
   WebSocket 메시지 `/app/analysis.stop` 전송
2. 서버: CardController/AnalysisStompController → 중지 요청 처리
3. 서버: CardService/AnalysisStompHandler → 분석 중지
4. 서버 → 클라이언트: 중지 메시지 전송

## 3. 구현 상세 계획

### 3.1 AnalysisStompHandler

주요 메서드:
- `startAnalysis(AnalysisRequest, String)`: 분석 시작
- `stopAnalysis(String, String, String)`: 분석 중지
- `sendAnalysisResponse(String, AnalysisResponse)`: 분석 결과 전송
- `sendErrorMessage(String, String)`: 오류 메시지 전송
- `sendInitialResponse(String, AnalysisRequest)`: 초기 응답 전송
- `sendStopMessage(String, String, String)`: 중지 메시지 전송
- `isDuplicateAnalysis(AnalysisRequest)`: 중복 분석 확인
- `isCardAlreadyRunning(String)`: 카드 실행 여부 확인
- `generateCardId(String, String)`: 카드 ID 생성

### 3.2 AnalysisStompController 

주요 메서드:
- `@MessageMapping("/analysis.start")`: 분석 시작 요청 처리
- `@MessageMapping("/analysis.stop")`: 분석 중지 요청 처리

### 3.3 CardService

주요 메서드:
- `createCard(AnalysisRequest)`: 카드만 생성
- `createCardAndStartAnalysis(AnalysisRequest, String)`: 카드 생성 후 분석 시작
- `getCard(String)`: 카드 조회
- `getAllCards()`: 모든 카드 조회
- `deleteCard(String)`: 카드 삭제 (분석 중지 포함)
- `startAnalysis(AnalysisRequest, String)`: 분석 시작
- `stopAnalysis(String)`: 분석 중지
- `updateCardStatus(String, String)`: 카드 상태 업데이트

### 3.4 CardController

주요 엔드포인트:
- `POST /api/cards`: 카드 생성 (분석 자동 시작)
- `GET /api/cards`: 모든 카드 조회
- `GET /api/cards/{cardId}`: 특정 카드 조회
- `DELETE /api/cards/{cardId}`: 카드 삭제 (분석 중지 포함)
- `POST /api/cards/{cardId}/start`: 분석 시작
- `POST /api/cards/{cardId}/stop`: 분석 중지

## 4. 클라이언트 통합 가이드

### 4.1 카드 생성 및 분석 시작
```javascript
// HTTP 요청으로 카드 생성
fetch('/api/cards', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    exchange: 'UPBIT',
    currencyPair: 'KRW-BTC',
    symbol: 'BTC',
    quoteCurrency: 'KRW',
    tradingStyle: 'dayTrading'
  })
})
.then(response => response.json())
.then(card => {
  // 카드 생성 성공 시 WebSocket 연결
  connectWebSocket(card.cardId);
});
```

### 4.2 WebSocket 연결 및 데이터 구독
```javascript
function connectWebSocket(cardId) {
  // WebSocket 연결
  const socket = new SockJS('/ws');
  const stompClient = Stomp.over(socket);
  
  stompClient.connect({}, function() {
    // 카드별 토픽 구독
    stompClient.subscribe(`/topic/analysis.${cardId}`, function(message) {
      const response = JSON.parse(message.body);
      updateCardUI(response);
    });
    
    // 에러 토픽 구독
    stompClient.subscribe(`/topic/analysis.error.${cardId}`, function(message) {
      const error = JSON.parse(message.body);
      showError(error.message);
    });
    
    // 중지 토픽 구독
    stompClient.subscribe(`/topic/analysis.stop.${cardId}`, function(message) {
      const stopData = JSON.parse(message.body);
      handleStopEvent(stopData);
    });
    
    // 연결 정보 저장
    activeConnections[cardId] = stompClient;
  });
}
```

### 4.3 카드 삭제 및 분석 중지
```javascript
function deleteCard(cardId) {
  // HTTP로 카드 삭제
  fetch(`/api/cards/${cardId}`, {
    method: 'DELETE'
  })
  .then(() => {
    // 카드 UI 제거
    removeCardUI(cardId);
    // WebSocket 연결 종료
    disconnectWebSocket(cardId);
  });
}

function disconnectWebSocket(cardId) {
  const stompClient = activeConnections[cardId];
  if (stompClient) {
    stompClient.disconnect();
    delete activeConnections[cardId];
  }
}
```

## 5. 리팩토링 구현 결과

1. ✅ `AnalysisStompController` 개선:
   - 컨트롤러 역할에 집중하도록 변경
   - 인프라 상태 확인 로직 추가
   - 핸들러에 분석 시작/중지 작업 위임
   - 예외 상황 로깅 및 오류 메시지 전송

2. ✅ `AnalysisStompHandler` 개선:
   - 중복 분석 체크 기능 추가
   - 이미 실행중인 카드 처리 로직 추가
   - 카드 ID 자동 생성 기능 추가
   - 오류 메시지 전송 기능 강화

3. ✅ `AnalysisManager` 개선:
   - 활성 분석 요청 목록 조회 메서드 추가
   - 카드 활성 상태 확인 메서드 추가
   - 세션 관리 기능 강화

4. ⭐ 주요 개선사항:
   - 동일한 거래소/코인 중복 분석 방지 기능 구현
   - 이미 실행 중인 카드에 대한 재시작 정책 적용
   - 분석 시작 전 인프라 상태 확인으로 안정성 향상
   - 카드별 토픽을 통한 메시지 라우팅 개선
   - 오류 처리 및 예외 대응 체계 강화

## 6. 리팩토링 이점

1. **코드 품질 향상**:
   - 명확한 책임 분리
   - 단일 책임 원칙 준수
   - 코드 재사용성 증가

2. **유지보수성 향상**:
   - 모듈화된 구조로 변경 영향 최소화
   - 테스트 용이성 증가
   - 관심사 분리로 각 컴포넌트 독립적 수정 가능

3. **확장성 개선**:
   - 신규 기능 추가 용이
   - 기존 코드 변경 최소화
   - 각 컴포넌트 독립적 확장 가능

4. **사용성 개선**:
   - 명확한 API 인터페이스
   - 직관적인 데이터 흐름
   - 일관된 에러 처리

## 7. 구현된 클래스 기능 요약

### 7.1 AnalysisStompController:
- WebSocket 메시지 엔드포인트 제공
- 인프라 상태 확인 후 처리 진행
- 핸들러에 분석 시작/중지 작업 위임
- 예외 상황 로깅 및 오류 메시지 전송

### 7.2 AnalysisStompHandler:
- 분석 시작/중지 로직 구현
- 중복 분석 체크 기능 추가
- 카드 ID 생성 및 관리
- 메시지 전송 및 구독 관리
- 분석 응답 스트림 처리

### 7.3 AnalysisManager:
- 카드와 세션 매핑 관리
- 분석 요청 등록 및 해제
- 세션 연결 해제 감지 및 처리
- 활성 분석 상태 추적

### 7.4 CardService 및 CardController:
- REST API를 통한 카드 CRUD 기능
- 분석 시작/중지 웹소켓 기반 처리
- 카드 상태 관리 및 추적

## 8. 남은 작업

- ⏳ 단위 테스트 및 통합 테스트 작성
- ⏳ 프론트엔드 연동 코드 수정
- ⏳ 향후 DB 연동 시 CardRepository 구현

## 9. 리팩토링 결과

1. **구조 개선**:
   - 관심사 분리로 코드 가독성 및 유지보수성 향상
   - 웹소켓 처리와 카드 관리 로직 분리
   - 명확한 API 계층 정의

2. **기능 향상**:
   - 중복 분석 방지 및 재시작 정책 구현
   - 인프라 상태 확인으로 안정성 증대
   - 분석 세션 관리 기능 개선
   - 카드별 분석 상태 추적 용이
   - 메시지 전송 및 오류 처리 체계화

3. **성능 최적화**:
   - 불필요한 데이터 변환 제거
   - 효율적인 메시지 라우팅
   - 동시성 고려한 구현

4. **사용성 개선**:
   - 일관된 REST API 인터페이스
   - 카드별 WebSocket 토픽 제공
   - 직관적인 에러 메시지 및 상태 관리
