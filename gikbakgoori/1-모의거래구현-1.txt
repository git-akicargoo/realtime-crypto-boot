시간	상태	매수가	매도가	현재가	수량	매수금액	매도금액	수익률	현재가치


시뮬 트레이딩: 
초기 잔액: 1,000,000 KRW 현재 잔액: 1,000,000 KRW
매수 신호 기준값: 30% 50% 70%
익절 기준(%): 0.1 손절 기준(%): 0.1
자동 거래 시작

# 모의거래 기능 구현 계획 (Simul-Trading)

## 1. 개요 및 목표
- 암호화폐 분석 플랫폼에 모의거래(시뮬레이션 트레이딩) 기능 추가
- 실제 자금 투입 없이 트레이딩 전략 테스트 가능하도록 구현
- 분석 카드와 연동하여 실시간 데이터 기반 자동 매매 시뮬레이션 제공

## 2. 현재 문제점 및 변경 필요사항
- 카드 ID 시스템: 현재 방식으로는 동일 거래소-통화쌍 조합으로 여러 카드 생성 불가
- 카드 식별 방법: 타임스탬프와 UUID를 결합하여 고유성 확보 필요
- 모의거래 UI: analysis.html에 모의거래 섹션 추가 필요
- 데이터 전송: 선택된 카드 정보를 백엔드로 전송하는 방식 구현 필요

## 3. 구현 단계 및 데이터 흐름

### 3.1 카드 식별 시스템 개선 (UUID + 타임스탬프)
- Card.js 파일에 UUID 생성 함수 추가
- 카드 생성 함수에서 타임스탬프와 UUID를 결합한 고유 ID 생성
- 카드 요소에 데이터 속성으로 저장:
  * data-base-id: 기존 방식(${exchange}-${currencyPair})
  * data-timestamp: 카드 생성 시간
  * data-uuid: 고유 식별자
  * data-exchange, data-currency-pair 등 기타 필요 정보

### 3.2 분석 카드 정보 관리
- 카드에 표시되는 분석 정보는 그대로 유지
- 필요시 카드 ID 또는 생성 시간을 표시하여 구분 가능하게 함
- 카드 컨테이너에 카드 객체 참조 저장 (메모리 관리)

### 3.3 모의거래 UI 구축
- analysis.html에 모의거래 섹션 추가
- 카드 선택 드롭다운 구현:
  * 현재 활성화된 모든 분석 카드 목록 표시
  * 카드 선택 시 해당 카드 ID와 정보 가져오기
- 모의거래 설정 폼 구현:
  * 초기 잔액, 매수 신호 기준값, 익절/손절 기준 설정
  * 선택된 카드 정보 히든 필드에 저장

### 3.4 백엔드 연동 및 데이터 전송
- "자동거래시작" 버튼 클릭 시 이벤트 핸들러 구현
- 선택된 카드의 데이터와 사용자 설정을 결합하여 요청 데이터 구성:
  * 카드 ID (타임스탬프+UUID 포함)
  * 거래소, 통화쌍 정보
  * 모의거래 설정값
- 백엔드 API로 데이터 전송 (POST 요청)
- 응답에 따른 UI 상태 업데이트

### 3.5 실시간 거래 내역 표시
- 웹소켓 연결을 통해 거래 내역 수신
- 테이블에 거래 내역 실시간 추가/업데이트
- 현재 상태 정보 (잔액, 수익률 등) 갱신

## 4. 구현해야 할 주요 기능

1. **카드 고유 ID 시스템**:
   - UUID 생성 함수 구현
   - 타임스탬프 + UUID 기반 ID 생성
   - 데이터 속성 저장 및 관리

2. **모의거래 UI**:
   - 카드 선택 드롭다운 및 이벤트 처리
   - 설정 폼 및 유효성 검사
   - 거래 내역 테이블 및 상태 표시

3. **백엔드 통신**:
   - API 요청 구성 및 전송
   - 응답 처리 및 상태 업데이트
   - 웹소켓 메시지 처리

이 계획대로 구현하면 사용자는 분석 카드를 선택하고 설정한 후 자동거래시작 버튼을 클릭하여 해당 카드의 데이터를 기반으로 모의거래를 시작할 수 있습니다. 백엔드는 전송된 카드 데이터와 설정을 바탕으로 거래 로직을 처리하고, 결과를 실시간으로 클라이언트에 전송하게 됩니다.