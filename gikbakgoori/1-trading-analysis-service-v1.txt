# Trading Analysis Service v1 - 실시간 암호화폐 반등/하락 분석 및 모의 거래 시스템

## 1. 패키지 구조
```
com.example.boot
└── trading
    └── analysis
        ├── config
        │   ├── AnalysisConfig.java          # 분석 설정
        │   └── ExchangeConfig.java          # 거래소/코인 설정
        ├── model
        │   ├── dto
        │   │   ├── AnalysisResponse.java    # API 응답 DTO
        │   │   └── TradingResponse.java     # 거래 응답 DTO
        │   ├── common
        │   │   ├── Exchange.java            # 거래소 정보
        │   │   └── TradingPair.java         # 거래쌍 정보
        │   ├── analysis
        │   │   ├── MarketAnalysis.java      # 시장 분석 결과
        │   │   └── TrendSignal.java         # 추세 신호
        │   └── trading
        │       ├── Position.java            # 거래 포지션
        │       └── TradingResult.java       # 거래 결과
        ├── service
        │   ├── analysis
        │   │   ├── MarketAnalysisService.java   # 시장 분석 서비스
        │   │   └── TrendAnalyzer.java          # 추세 분석기
        │   ├── trading
        │   │   ├── MockTradingService.java     # 모의 거래 서비스
        │   │   └── PositionManager.java        # 포지션 관리자
        │   └── performance
        │       └── PerformanceAnalyzer.java    # 성과 분석기
        ├── repository
        │   ├── AnalysisRepository.java     # 분석 결과 저장소
        │   └── TradingRepository.java      # 거래 결과 저장소
        └── executor
            └── TradingAnalysisExecutor.java # 분석/거래 실행기
```

## 2. 핵심 기능

### 2.1 실시간 데이터 처리

#### 2.1.1 데이터 캐싱
- Redis를 이용한 실시간 데이터 캐싱
- 분석 기간 동안만 캐시 유지 (30분)
- 분석 종료 시 캐시 정리

#### 2.1.2 기술적 지표 구현
1. SMA (Simple Moving Average)
   - 사용자 설정 가능한 단기/장기 이동평균선 계산 (기본값: 1분/3분)
   - 가격이 SMA 아래로 떨어졌다가 위로 돌파하는 시점 포착
   - 반등 신호로 활용
   - 웹 UI에서 기간 설정 가능 (1-60분)

2. RSI (Relative Strength Index) - 구현 예정
   - 과매도 구간(30 이하) 진입 확인
   - RSI가 상승으로 전환되는 시점 포착
   - 반등 확률 계산에 활용

#### 2.1.3 실시간 모니터링 카드
1. 카드 UI 구성
   - 거래소명과 거래쌍 표시
   - 현재가 및 변동률 (상승/하락 색상 구분)
   - 거래량 변동률
   - 반등 확률
   - 사용자 설정 SMA 라인 표시
   - SMA 상태 표시 (BREAKOUT/NORMAL)
   - 카드별 독립적인 시작/중지/삭제 기능

2. 실시간 업데이트
   - WebSocket으로 실시간 데이터 수신
   - 차트와 지표 실시간 갱신
   - 반등 신호 발생시 알림 효과
   - 연결 오류 시 자동 재연결

3. 카드 조작
   - Start: 분석 시작, 실시간 데이터 수신
   - Stop: 분석 중지, 리소스 정리
   - Delete: 카드 제거 및 백엔드 리소스 정리

4. 매매 시점 판단 기준
   - RSI 30 이하 진입
   - 가격이 단기/장기 SMA 상향 돌파 (사용자 설정 기간)
   - 거래량 증가 동반
   - 반등 확률 70% 이상

참고: 
- SMA 기간은 웹 UI에서 설정 가능 (1-60분)
- 단기 SMA는 장기 SMA보다 짧은 기간으로 설정해야 함
- 기본값: 단기 1분, 장기 3분

#### 2.1.4 모의 거래 기록
- 매수/매도 시점 기록
- 거래 결과 DB 저장
- 성과 분석 (추후 구현)

### 2.2 시장 분석
```
1. 반등 패턴 분석
   - 가격 하락 추세 확인
     * 단기/중기/장기 이동평균선 활용
     * 하락 깊이와 지속 시간 측정
   - 거래량 패턴 분석
     * 거래량 증가율 및 지속성 확인
     * 매수/매도 세력 비교
   - 모멘텀 지표 활용
     * RSI (상대강도지수)
     * MACD (이동평균수렴확산)
     * 볼린저 밴드

2. 반등 요인 분석
   - 기술적 요인
     * 과매도 구간 진입
     * 지지선 접근
     * 거래량 급증
   - 패턴 요인
     * 이중바닥 형성
     * 햄머 캔들스틱
     * 역배열 구간
   - 통계적 요인
     * 과거 유사 패턴 분석
     * 성공/실패 확률 계산
     * 리스크/리워드 비율
```

### 2.3 모의 거래
```
1. 매수 조건
   - 반등 확률 70% 이상
   - 최소 거래량 충족
   - 이전 거래와 중복 방지

2. 매도 조건
   - 수익률 목표 도달
   - 하락 전환 감지
   - 손절 기준 도달
```

## 3. 데이터 모델

### 3.1 분석 결과 (MarketAnalysis)
```java
@Entity
public class MarketAnalysis {
    @Id @GeneratedValue
    private Long id;
    
    private String exchange;
    private String currencyPair;
    private LocalDateTime timestamp;
    
    private double currentPrice;
    private double priceChangePercent;
    private double volume;
    private double reboundProbability;
    
    private double volumeChangePercent;
    private double priceVolatility;
    private String analysisDetails;  // JSON 형태로 추가 정보 저장
}
```

### 3.2 거래 결과 (TradingResult)
```java
@Entity
public class TradingResult {
    private String exchange;
    private TradingPair pair;
    private TradeType type;        // BUY/SELL
    private double price;
    private double quantity;
    private double profitLoss;
    private LocalDateTime timestamp;
}
```

## 4. 구현 우선순위

1. 기술적 지표 추가 (SMA, RSI)
2. 모니터링 카드 개선
3. 반등 확률 계산 로직 고도화
4. 모의 거래 기록 시스템

## 5. 보완 필요 사항

1. 캐시 관리
   - 메모리 사용량 최적화
   - 캐시 정리 전략
   - 데이터 정합성 보장

2. 분석 신뢰도
   - 분석 결과 검증
   - 오탐 필터링
   - 백테스팅 시스템

3. 확장성
   - 새로운 분석 전략 추가
   - 거래소/코인 추가
   - 성능 스케일링

### 2.4 데이터 분석 개선사항
```
1. 반등 패턴 인식 시스템

   - 과거 패턴 데이터베이스 구축
   - 실시간 패턴 매칭

2. 분석 지표 확장
   - 기술적 지표 추가
   - 거래량 프로파일 분석
   - 시장 심리 지표

3. 백테스팅 시스템
   - 과거 데이터 기반 검증
   - 전략 최적화
   - 성과 분석



   =======================================================
   MarketAnalysisService에 더 많은 기술적 지표 추가
과거 패턴 분석을 위한 데이터 저장 및 분석 로직
반등 성공/실패 사례 학습 시스템
실시간 패턴 매칭 알고리즘
이러한 개선사항들을 구현하면 더 정확한 반등 예측이 가능할 것입니다. 특히 과거 데이터에서 성공적인 반등 케이스의 특징을 학습하는 것이 중요합니다.


==============================================================

단타 자동매매 프로그램 설계 요약
현재 설계
기술 스택: Java Spring Boot, JPA, MySQL, Kafka, Zookeeper, Redis
데이터 흐름: 바이낸스, 업비트, 빗썸 ticker 데이터를 Kafka로 실시간 수집 → Redis에 30분 데이터 캐싱 (선입선출, 오래된 데이터 삭제) → 1분 간격으로 반등 구간 분석.
반등 구간 탐지
기본 지표: 가격 하락 후 상승 (-1% → +0.5%), 거래량 30% 이상 증가.
추가 지표: SMA(5분), RSI(30 이하), 거래소 간 상관관계.
분석: Kafka 실시간 처리 → Redis 30분 데이터로 1분 단위 계산 → 반등 신호 발생.
Redis 캐싱
방식: 30분 데이터 유지, FIFO로 오래된 데이터 삭제 (예: LPUSH, LTRIM 0 29).
제어: Start 시 캐싱 시작, Stop 시 캐싱 중지.
프론트 웹 프로그램
기능:
Start: 실시간 반등 확률을 카드로 표시 (Redis 30분 데이터 기반 계산).
Stop: 캐싱 중지, 데이터 수집 및 분석 멈춤.
목적: 실시간 반등 확률 모니터링 → 기대치(예: 70% 이상) 충족 시 단타 시점 결정.
반등 확률 관리
계산: Redis 30분 데이터로 과거 패턴 분석, 실시간 확률 제공.
저장: MySQL에 { ticker, 감지 시각, 반등 확률, 실제 반등 여부 } 기록.
리스트: DB 조회로 반등 예측 결과 확인 (예: "BTC-KRW, 2025-02-25 10:00, 75%, 성공").
동작 흐름
Start → Kafka 데이터 수집 → Redis 30분 FIFO 캐싱 → 반등 확률 실시간 웹 표시.
반등 확률 70% 이상 → 단타 시점 판단 → DB에 기록.
Stop → 캐싱 및 분석 중지 → 모니터링 종료.
이렇게 하면 Redis 30분 FIFO 캐싱과 실시간 웹 모니터링을 통해 반등 확률을 추적하고 단타를 진행할 수 있습니다. 추가로 보완할 점 있으면 말씀해주세요!

===================================
SMA와 RSI는 금융 거래에서 자주 사용되는 기술적 분석 지표인데, 간단히 설명드릴게요!

SMA (Simple Moving Average, 단순 이동평균선)
정의: 일정 기간 동안의 가격 데이터를 평균 낸 값. 예를 들어, 5분 SMA는 최근 5분간의 종가를 더해서 5로 나눈 값이에요.
용도: 가격의 단기 또는 장기 추세를 부드럽게 보여줘요. 단타에서는 5분이나 10분 SMA를 써서 가격이 하락하다가 상승으로 바뀌는 지점을 찾을 수 있습니다.
예시: 가격이 5분 SMA 아래로 떨어졌다가 다시 위로 올라오면 반등 신호로 볼 수 있어요.
RSI (Relative Strength Index, 상대강도지수)
정의: 가격의 상승과 하락 강도를 0~100으로 나타낸 지표. 최근 가격 변동을 분석해서 과매수(너무 많이 오른 상태)나 과매도(너무 많이 내린 상태)를 판단해요.
계산: 보통 14일 데이터를 쓰지만, 단타라면 5분~15분 같은 짧은 주기로 설정 가능. 공식은 (평균 상승폭 / (평균 상승폭 + 평균 하락폭)) × 100이에요.
용도:
RSI 30 이하: 과매도 → 반등 가능성 높음.
RSI 70 이상: 과매수 → 하락 가능성 높음.
예시: RSI가 30 아래로 떨어졌다가 올라오면 반등 구간으로 볼 수 있어요.
단타에서의 활용
SMA: 하락 후 SMA를 뚫고 올라가는 순간을 반등 신호로.
RSI: 과매도 상태에서 RSI가 상승하면 반등 확률이 높다고 판단.
쉽게 말하면, SMA는 추세를 확인하고, RSI는 가격이 너무 내려갔는지 체크하는 도구예요. 둘 다 Redis 30분 데이터로 실시간 계산해서 단타 타이밍 잡는 데 유용합니다! 더 궁금한 점 있으면 물어보세요.

======================================================
RSI(30 이하) 지표 구현 없음