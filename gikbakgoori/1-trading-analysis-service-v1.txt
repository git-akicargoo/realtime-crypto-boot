# Trading Analysis Service v1 - 실시간 암호화폐 반등/하락 분석 및 모의 거래 시스템

## 1. 패키지 구조
```
com.example.boot
└── trading
    └── analysis
        ├── config
        │   ├── AnalysisConfig.java          # 분석 설정
        │   └── ExchangeConfig.java          # 거래소/코인 설정
        ├── model
        │   ├── dto
        │   │   ├── AnalysisResponse.java    # API 응답 DTO
        │   │   └── TradingResponse.java     # 거래 응답 DTO
        │   ├── common
        │   │   ├── Exchange.java            # 거래소 정보
        │   │   └── TradingPair.java         # 거래쌍 정보
        │   ├── analysis
        │   │   ├── MarketAnalysis.java      # 시장 분석 결과
        │   │   └── TrendSignal.java         # 추세 신호
        │   └── trading
        │       ├── Position.java            # 거래 포지션
        │       └── TradingResult.java       # 거래 결과
        ├── service
        │   ├── analysis
        │   │   ├── MarketAnalysisService.java   # 시장 분석 서비스
        │   │   └── TrendAnalyzer.java          # 추세 분석기
        │   ├── trading
        │   │   ├── MockTradingService.java     # 모의 거래 서비스
        │   │   └── PositionManager.java        # 포지션 관리자
        │   └── performance
        │       └── PerformanceAnalyzer.java    # 성과 분석기
        ├── repository
        │   ├── AnalysisRepository.java     # 분석 결과 저장소
        │   └── TradingRepository.java      # 거래 결과 저장소
        └── executor
            └── TradingAnalysisExecutor.java # 분석/거래 실행기
```

## 2. 핵심 기능

### 2.1 실시간 데이터 처리
```
1. 데이터 캐싱
   - Redis를 이용한 실시간 데이터 캐싱
   - 분석 기간 동안만 캐시 유지
   - 분석 종료 시 캐시 정리

2. 캐시 관리
   - 분석 시작/종료 시점 제어
   - 메모리 사용량 모니터링
   - 캐시 데이터 정합성 유지
```

### 2.2 시장 분석
```
1. 반등 구간 포착
   - 가격 하락 확인
   - 거래량 급증 확인
   - 이전 분석 결과 참조

2. 분석 결과 활용
   - 실시간 분석 결과 저장
   - 저장된 결과 재활용
   - 분석 신뢰도 평가
```

### 2.3 모의 거래
```
1. 매수 조건
   - 반등 확률 70% 이상
   - 최소 거래량 충족
   - 이전 거래와 중복 방지

2. 매도 조건
   - 수익률 목표 도달
   - 하락 전환 감지
   - 손절 기준 도달
```

## 3. 데이터 모델

### 3.1 분석 결과 (MarketAnalysis)
```java
@Entity
public class MarketAnalysis {
    @Id @GeneratedValue
    private Long id;
    
    private String exchange;
    private String currencyPair;
    private LocalDateTime timestamp;
    
    private double currentPrice;
    private double priceChangePercent;
    private double volume;
    private double reboundProbability;
    
    private double volumeChangePercent;
    private double priceVolatility;
    private String analysisDetails;  // JSON 형태로 추가 정보 저장
}
```

### 3.2 거래 결과 (TradingResult)
```java
@Entity
public class TradingResult {
    private String exchange;
    private TradingPair pair;
    private TradeType type;        // BUY/SELL
    private double price;
    private double quantity;
    private double profitLoss;
    private LocalDateTime timestamp;
}
```

## 4. 구현 우선순위

1. 데이터 캐싱 시스템
   - TradingAnalysisExecutor
   - RedisCacheService
   - 캐시 모니터링

2. 반등 분석 시스템
   - MarketAnalysis 엔티티
   - AnalysisRepository
   - MarketAnalysisService

3. 모의 거래 시스템
   - MockTradingService
   - PositionManager
   - TradingRepository

4. 성과 분석 시스템
   - PerformanceAnalyzer
   - 성과 지표 계산
   - 리포트 생성

## 5. 보완 필요 사항

1. 캐시 관리
   - 메모리 사용량 최적화
   - 캐시 정리 전략
   - 데이터 정합성 보장

2. 분석 신뢰도
   - 분석 결과 검증
   - 오탐 필터링
   - 백테스팅 시스템

3. 확장성
   - 새로운 분석 전략 추가
   - 거래소/코인 추가
   - 성능 스케일링