# Exchange Service 아키텍처 및 구현 계획

## 레이어 구조

### Layer 1 - Core
/layer1_core/
- 기본 모델 정의
- 프로토콜 정의
- 공통 유틸리티

구현 내용:
- CurrencyPair: 거래쌍 모델
- ExchangeMessage: 기본 메시지 모델
- BaseExchangeProtocol: 거래소 프로토콜 인터페이스
- 거래소별 프로토콜 구현체 (Binance, Upbit, Bithumb)

### Layer 2 - WebSocket
/layer2_websocket/
- 거래소 웹소켓 연결 관리
- 실시간 메시지 송수신

구현 내용:
- ConnectionFactory: 웹소켓 연결 생성
- MessageHandler: 메시지 송수신 처리
- WebSocketConfig: 웹소켓 설정

### Layer 3 - Data Converter
/layer3_data_converter/
- 거래소별 데이터 표준화
- 메시지 변환 및 통합

구현 내용:
- StandardExchangeData: 표준화된 데이터 모델
- DataConverterService: 데이터 변환 서비스 인터페이스
- ExchangeDataConverter: 거래소별 변환 로직

### Layer 4 - Service
/layer4_service/
- 비즈니스 로직
- 용도별 데이터 가공

구현 내용:
- ExchangeDataProcessor: 공통 데이터 처리
- 용도별 서비스:
  - KafkaExchangeService
  - WebSocketExchangeService
  - RedisExchangeService

### Infrastructure
/infrastructure/

1. 필수 인프라 (항상 활성화)
   - MySQL
     - 기본 데이터 저장소
     - 설정 정보 관리
   - Web
     - 클라이언트 웹소켓 연동
     - REST API 제공

2. 선택적 인프라 (조건부 활성화)
   - Kafka: 메시지 브로커
   - Redis: 캐싱 및 세션 관리


## 구현 순서 및 세부 계획

1. Layer 1 Core 구현 [완료]
   - [x] CurrencyPair 모델
   - [x] ExchangeMessage 모델
   - [x] BaseExchangeProtocol 인터페이스
   - [x] 거래소별 프로토콜 구현

2. Layer 2 WebSocket 구현 [완료]
   - [x] WebSocketConfig 설정
   - [x] ConnectionFactory 인터페이스 및 구현
   - [x] MessageHandler 인터페이스 및 구현

3. Layer 3 Data Converter 구현
   - [ ] StandardExchangeData 모델 정의
   - [ ] DataConverterService 인터페이스 정의
   - [ ] 거래소별 데이터 변환 로직 구현
   - [ ] 테스트 코드 작성

4. Layer 4 Service 구현
   - [ ] ExchangeDataProcessor 구현
   - [ ] 인프라별 서비스 구현
   - [ ] 테스트 코드 작성

5. Infrastructure 구현
   A. 필수 인프라
      - [ ] MySQL 연동
        - [ ] 엔티티 설계
        - [ ] Repository 구현
      - [ ] Web 연동
        - [ ] 웹소켓 핸들러
        - [ ] REST 컨트롤러

   B. 선택적 인프라
      - [ ] Kafka 연동 (조건부)
        - [ ] Producer 구현
        - [ ] Consumer 구현
      - [ ] Redis 연동 (조건부)
        - [ ] 캐시 서비스 구현

6. 통합 테스트
   - [ ] 전체 플로우 테스트
   - [ ] 성능 테스트
   - [ ] 에러 처리 테스트


## 데이터 흐름
1. Layer 1: 기본 모델 정의
2. Layer 2: 거래소 연결 및 데이터 수신
3. Layer 3: 데이터 표준화 및 변환
4. Layer 4: 비즈니스 로직 적용 및 용도별 가공
5. Infrastructure: 외부 시스템으로 전달


## 주요 고려사항

1. 레이어 설계
   - 각 레이어의 명확한 책임과 역할 정의
   - 레이어간 의존성 방향 준수
   - 인터페이스 기반 설계

2. 인프라 독립성
   - 필수 인프라 (MySQL, Web)
     - 핵심 기능 구현에 필요한 최소 인프라
     - 항상 활성화되어 있음
   
   - 선택적 인프라 (Kafka, Redis)
     - application.yml 설정으로 활성화/비활성화 가능
     - 비활성화되어도 코어 기능 동작에 영향 없음
     - @ConditionalOnProperty 사용하여 조건부 활성화

3. 확장성
   - 새로운 거래소 추가 용이
   - 새로운 인프라 추가 용이
   - 인터페이스 기반 설계로 구현체 교체 용이

4. 유지보수성
   - 명확한 패키지 구조
   - 테스트 용이성
   - 문서화

5. 성능
   - 비동기 처리
   - 캐싱 전략
   - 배치 처리 고려


## 다음 구현 단계
Layer 3 Data Converter 구현부터 시작
- StandardExchangeData 모델 정의
- DataConverterService 인터페이스 설계
- 거래소별 변환 로직 구현