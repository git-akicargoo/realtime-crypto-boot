spring:
  profiles:
    active: local
  kafka:
    enabled: false  # 기본값은 false로 설정
    consumer:
      group-id: exchange-group    # 모든 환경에서 공통으로 사용할 group-id

server:
  port: 8080

# 공통 설정
exchange:
  connection:
    max-retry-attempts: 3
    reconnect-delay: 1000      # 1초
    connection-timeout: 30000   # 30초
  websocket:
    binance: wss://stream.binance.com:9443/ws
    upbit: wss://api.upbit.com/websocket/v1
    bithumb: wss://pubwss.bithumb.com/pub/ws
  common:
    supported-symbols:
      - BTC
      - ETH
      - XRP
      - DOGE
  exchanges:
    binance:
      supported-currencies:
        - USDT
        - BTC
    upbit:
      supported-currencies:
        - KRW
        - BTC
        - USDT
    bithumb:
      supported-currencies:
        - KRW
        - BTC
        - USDT

app:
  websocket:
    allowed-origins: ${WEBSOCKET_ALLOWED_ORIGINS:*}
    connection:
      max-retry-attempts: 3
      reconnect-delay: 1000
      connection-timeout: 5000
  kafka:
    topic:
      trades: exchange.trades
      leader: exchange.data    # 리더 선출용 토픽
    leader:
      partition: 0            # 리더 선출용 파티션 번호

---
# 로컬 개발 환경
spring:
  config:
    activate:
      on-profile: local
  kafka:
    enabled: true
    bootstrap-servers: localhost:9092
    consumer:
      auto-offset-reset: latest
      properties:
        session.timeout.ms: 10000
        heartbeat.interval.ms: 3000

---
# Docker Compose 환경
spring:
  config:
    activate:
      on-profile: docker
  kafka:
    enabled: true
    bootstrap-servers: kafka:9092
    consumer:
      auto-offset-reset: latest
      properties:
        session.timeout.ms: 10000
        heartbeat.interval.ms: 3000

---
# AWS 운영 환경
spring:
  config:
    activate:
      on-profile: prod
  kafka:
    enabled: true
    bootstrap-servers: ${KAFKA_SERVERS}
    consumer:
      auto-offset-reset: latest
      properties:
        session.timeout.ms: 10000
        heartbeat.interval.ms: 3000
        security.protocol: SASL_SSL
        sasl.mechanism: AWS_MSK_IAM
        sasl.jaas.config: ${KAFKA_JAAS_CONFIG}
        sasl.client.callback.handler.class: software.amazon.msk.auth.iam.IAMClientCallbackHandler

app:
  websocket:
    allowed-origins: https://*.yourdomain.com



