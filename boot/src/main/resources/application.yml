spring:
  profiles:
    active: local
  kafka:
    enabled: false  # 기본값은 false로 설정
    consumer:
      group-id: exchange-group    # 모든 환경에서 공통으로 사용할 group-id

server:
  port: 8080

# 공통 설정
exchange:
  websocket:
    binance: wss://stream.binance.com:9443/ws
    upbit: wss://api.upbit.com/websocket/v1
    bithumb: wss://pubwss.bithumb.com/pub/ws
  message-format:
    binance:
      subscribe: '{"method":"SUBSCRIBE","params":["%s@trade"],"id":1}'
      unsubscribe: '{"method":"UNSUBSCRIBE","params":["%s@trade"],"id":1}'
    upbit:
      subscribe: '[{"ticket":"UNIQUE_TICKET"},{"type":"trade","codes":["%s"]},{"format":"SIMPLE"}]'
      unsubscribe: '[{"ticket":"UNIQUE_TICKET"},{"type":"trade","codes":["%s"]},{"format":"SIMPLE"}]'
    bithumb:
      subscribe: '{"type":"transaction","symbols":["%s"]}'
      unsubscribe: '{"type":"transaction","symbols":["%s"]}'
  common:
    supported-symbols:
      - BTC
      - ETH
      - XRP
      - DOGE
  exchanges:
    binance:
      supported-currencies:
        - USDT    # 가장 많이 사용되는 스테이블코인
        - BTC     # BTC 마켓
    upbit:
      supported-currencies:
        - KRW     # 원화 마켓
        - BTC     # BTC 마켓
        - USDT    # USDT 마켓 (일부 거래쌍)
    bithumb:
      supported-currencies:
        - KRW     # 원화 마켓
        - BTC     # BTC 마켓
        - USDT    # USDT 마켓

app:
  websocket:
    allowed-origins: ${WEBSOCKET_ALLOWED_ORIGINS:*}
  kafka:
    topic:
      trades: exchange.trades
      leader: exchange.data    # 리더 선출용 토픽
    leader:
      partition: 0            # 리더 선출용 파티션 번호

---
# 로컬 개발 환경
spring:
  config:
    activate:
      on-profile: local
  kafka:
    enabled: true
    bootstrap-servers: localhost:9092
    consumer:
      auto-offset-reset: latest
      properties:
        session.timeout.ms: 10000
        heartbeat.interval.ms: 3000

---
# Docker Compose 환경
spring:
  config:
    activate:
      on-profile: docker
  kafka:
    enabled: true
    bootstrap-servers: kafka:9092
    consumer:
      auto-offset-reset: latest
      properties:
        session.timeout.ms: 10000
        heartbeat.interval.ms: 3000

---
# AWS 운영 환경
spring:
  config:
    activate:
      on-profile: prod
  kafka:
    enabled: true
    bootstrap-servers: ${KAFKA_SERVERS}
    consumer:
      auto-offset-reset: latest
      properties:
        session.timeout.ms: 10000
        heartbeat.interval.ms: 3000
        security.protocol: SASL_SSL
        sasl.mechanism: AWS_MSK_IAM
        sasl.jaas.config: ${KAFKA_JAAS_CONFIG}
        sasl.client.callback.handler.class: software.amazon.msk.auth.iam.IAMClientCallbackHandler

app:
  websocket:
    allowed-origins: https://*.yourdomain.com



