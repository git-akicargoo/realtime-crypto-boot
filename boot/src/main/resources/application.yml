spring:
  profiles:
    active: local
  kafka:
    enabled: false  # 기본값은 false로 설정
    consumer:
      group-id: exchange-group    # 모든 환경에서 공통으로 사용할 group-id

server:
  port: 8080

# 공통 설정
exchange:
  connection:
    max-retry-attempts: 3
    reconnect-delay: 1000      # 1초
    connection-timeout: 30000   # 30초
  websocket:
    binance: wss://stream.binance.com:9443/ws
    upbit: wss://api.upbit.com/websocket/v1
    bithumb: wss://pubwss.bithumb.com/pub/ws
  common:
    supported-symbols:
      - BTC
      - ETH
      - XRP
      - DOGE
  exchanges:
    binance:
      supported-currencies:
        - USDT
        - BTC
    upbit:
      supported-currencies:
        - KRW
        - BTC
        - USDT
    bithumb: 
      supported-currencies:
        # 빗썸은 KRW 만 지원한다네;;;
        - KRW    
        # - BTC
        # - USDT

app:
  websocket:
    allowed-origins: ${WEBSOCKET_ALLOWED_ORIGINS:*}
    connection:
      max-retry-attempts: 3
      reconnect-delay: 1000
      connection-timeout: 5000
  kafka:
    topic:
      trades: exchange.trades     # 거래 데이터용 토픽
      leader: exchange.leader     # 리더 선출용 토픽
    leader:
      partition: 0               # 리더 선출용 파티션 번호

logging:
  level:
    root: ${LOG_LEVEL:INFO}  # 기본값은 INFO, 환경변수로 오버라이드 가능
    org.apache.kafka: ERROR
    org.apache.zookeeper: ERROR    # Zookeeper 로그
    org.apache.curator: ERROR      # Curator 로그
    com.example.boot.exchange: DEBUG           # 거래소 관련 패키지
    com.example.boot.web.websocket: DEBUG      # 웹소켓 관련 패키지
    com.example.boot.exchange.layer3_data_converter.service.ExchangeDataIntegrationServiceImpl: DEBUG
    com.example.boot.exchange.layer3_data_converter.converter: DEBUG
    com.example.boot.web.websocket.handler.FrontendWebSocketHandler: DEBUG

---
# 로컬 개발 환경
spring:
  config:
    activate:
      on-profile: local
  kafka:
    enabled: true  # 로컬 테스트를 위해 활성화
    bootstrap-servers: localhost:9092

zookeeper:
  connect-string: localhost:2181  # 로컬 환경용 Zookeeper 주소

---
# Docker Compose 환경
spring:
  config:
    activate:
      on-profile: docker
  kafka:
    enabled: true
    bootstrap-servers: kafka:9092
    consumer:
      group-id: exchange-group

zookeeper:
  connect-string: zookeeper:2181  # 도커 환경용 Zookeeper 주소

app:
  websocket:
    allowed-origins: ${WEBSOCKET_ALLOWED_ORIGINS:*}

---
# EKS 운영 환경
spring:
  config:
    activate:
      on-profile: prod
  kafka:
    enabled: true
    bootstrap-servers: ${KAFKA_SERVERS}  # K8s Service DNS로 접근

app:
  websocket:
    allowed-origins: https://*.yourdomain.com



