package com.example.boot.web.card.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.boot.exchange.layer6_analysis.dto.AnalysisRequest;
import com.example.boot.web.card.service.CardService;
import com.example.boot.web.controller.InfrastructureStatusController;

import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * 카드 컨트롤러
 * 카드 관리를 위한 REST API를 제공합니다.
 */
@Slf4j
@RestController
@RequestMapping("/api/cards")
@RequiredArgsConstructor
public class CardController {
    
    private final CardService cardService;
    private final InfrastructureStatusController infraStatus;
    
    /**
     * 카드 생성 (선택적으로 분석 시작)
     * 
     * @param request 분석 요청 객체
     * @param startAnalysis 분석 시작 여부 (기본값: false)
     * @param httpServletRequest HTTP 요청 정보
     * @return 생성된 카드
     */
    @PostMapping
    public ResponseEntity<?> createCard(
            @RequestBody AnalysisRequest request,
            @RequestParam(required = false, defaultValue = "false") boolean startAnalysis,
            HttpServletRequest httpServletRequest) {
        
        log.info("Received card creation request: {}, startAnalysis: {}", request, startAnalysis);
        
        // 인프라 상태 확인
        var status = infraStatus.getStatus();
        if (!status.isValid()) {
            log.warn("Infrastructure not ready, status: {}", status);
            return ResponseEntity
                    .status(HttpStatus.SERVICE_UNAVAILABLE)
                    .body("Trading infrastructure is not ready. Please try again later.");
        }
        
        try {
            AnalysisRequest card;
            
            if (startAnalysis) {
                // 세션 ID 생성 (실제 환경에서는 적절한 세션 ID 생성 필요)
                String sessionId = httpServletRequest.getSession().getId();
                
                // 카드 생성 및 분석 시작
                card = cardService.createCardAndStartAnalysis(request, sessionId);
                log.info("Card created and analysis started: {}", card.getCardId());
            } else {
                // 카드만 생성
                card = cardService.createCard(request);
                log.info("Card created without analysis: {}", card.getCardId());
            }
            
            return ResponseEntity.ok(card);
        } catch (Exception e) {
            log.error("Error creating card: {}", e.getMessage(), e);
            return ResponseEntity
                    .status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error creating card: " + e.getMessage());
        }
    }
    
    /**
     * 분석 시작
     * 
     * @param cardId 카드 ID
     * @param httpServletRequest HTTP 요청 정보
     * @return 시작 결과
     */
    @PostMapping("/{cardId}/start")
    public ResponseEntity<?> startAnalysis(
            @PathVariable String cardId,
            HttpServletRequest httpServletRequest) {
        
        log.info("Received request to start analysis for card: {}", cardId);
        
        // 카드 조회
        AnalysisRequest card = cardService.getCard(cardId);
        if (card == null) {
            return ResponseEntity.notFound().build();
        }
        
        try {
            // 세션 ID 생성 (실제 환경에서는 적절한 세션 ID 생성 필요)
            String sessionId = httpServletRequest.getSession().getId();
            
            // 분석 시작
            cardService.startAnalysis(card, sessionId);
            
            return ResponseEntity.ok().body("Analysis started for card: " + cardId);
        } catch (Exception e) {
            log.error("Error starting analysis: {}", e.getMessage(), e);
            return ResponseEntity
                    .status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error starting analysis: " + e.getMessage());
        }
    }
    
    /**
     * 분석 중지
     * 
     * @param cardId 카드 ID
     * @return 중지 결과
     */
    @PostMapping("/{cardId}/stop")
    public ResponseEntity<?> stopAnalysis(@PathVariable String cardId) {
        log.info("Received request to stop analysis for card: {}", cardId);
        
        // 카드 조회
        AnalysisRequest card = cardService.getCard(cardId);
        if (card == null) {
            return ResponseEntity.notFound().build();
        }
        
        try {
            // 분석 중지
            cardService.stopAnalysis(cardId);
            
            return ResponseEntity.ok().body("Analysis stopped for card: " + cardId);
        } catch (Exception e) {
            log.error("Error stopping analysis: {}", e.getMessage(), e);
            return ResponseEntity
                    .status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error stopping analysis: " + e.getMessage());
        }
    }
    
    /**
     * 모든 카드 조회
     * 
     * @return 카드 목록
     */
    @GetMapping
    public ResponseEntity<List<AnalysisRequest>> getAllCards() {
        List<AnalysisRequest> cards = cardService.getAllCards();
        return ResponseEntity.ok(cards);
    }
    
    /**
     * 특정 카드 조회
     * 
     * @param cardId 카드 ID
     * @return 카드 정보
     */
    @GetMapping("/{cardId}")
    public ResponseEntity<?> getCard(@PathVariable String cardId) {
        AnalysisRequest card = cardService.getCard(cardId);
        if (card == null) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(card);
    }
    
    /**
     * 카드 삭제 (분석 중지 포함)
     * 
     * @param cardId 카드 ID
     * @return 삭제 결과
     */
    @DeleteMapping("/{cardId}")
    public ResponseEntity<?> deleteCard(@PathVariable String cardId) {
        log.info("Deleting card: {}", cardId);
        
        boolean deleted = cardService.deleteCard(cardId);
        if (!deleted) {
            return ResponseEntity.notFound().build();
        }
        
        return ResponseEntity.ok().body("Card deleted successfully");
    }
} 