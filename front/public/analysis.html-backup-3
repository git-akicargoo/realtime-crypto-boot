<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>암호화폐 시장 분석</title>
    <style>
        :root {
            --primary-color: #3498db;
            --secondary-color: #2980b9;
            --accent-color: #2ecc71;
            --text-primary: #333;
            --text-secondary: #666;
            --bg-primary: #fff;
            --bg-secondary: #f4f6f8;
            --bg-card: #fff;
            --border-color: #e0e0e0;
            --positive-color: #2ecc71;
            --negative-color: #e74c3c;
            --neutral-color: #3498db;
        }

        [data-theme="dark"] {
            --primary-color: #3498db;
            --secondary-color: #2980b9;
            --accent-color: #2ecc71;
            --text-primary: #f4f4f4;
            --text-secondary: #ccc;
            --bg-primary: #121212;
            --bg-secondary: #1e1e1e;
            --bg-card: #242424;
            --border-color: #333;
            --positive-color: #2ecc71;
            --negative-color: #e74c3c;
            --neutral-color: #3498db;
        }

        body {
            font-family: 'Noto Sans KR', sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--bg-primary);
            color: var(--text-primary);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        h2 {
            margin-top: 0;
            color: var(--text-primary);
            border-bottom: 2px solid var(--accent-color);
            padding-bottom: 8px;
        }

        /* 분석 폼 스타일 */
        .analysis-form {
            background-color: var(--bg-card);
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }

        .form-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            color: var(--text-secondary);
            font-weight: 500;
        }

        select, input {
            width: 100%;
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            background-color: var(--bg-secondary);
            color: var(--text-primary);
        }

        select:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }

        button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: background-color 0.2s;
        }

        button:hover {
            background-color: var(--secondary-color);
        }

        /* 상태 패널 */
        .status-panel {
            background-color: var(--bg-secondary);
            border-radius: 6px;
            padding: 10px 15px;
            margin-top: 15px;
        }

        .status-items {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-top: 5px;
        }

        .status-item {
            font-size: 0.9em;
        }

        /* 분석 결과 섹션 */
        .analysis-results-section {
            margin-top: 30px;
        }

        .analysis-cards-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
        }

        /* 분석 카드 스타일 */
        .analysis-card {
            background-color: var(--bg-card);
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .card-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 12px 15px;
            background-color: var(--bg-secondary);
            border-bottom: 1px solid var(--border-color);
        }

        .exchange-info {
            color: var(--text-secondary);
            font-size: 0.9em;
        }

        .currency-pair {
            font-weight: bold;
            font-size: 1.1em;
        }

        .card-actions {
            display: flex;
            gap: 5px;
        }

        .delete-button {
            background-color: #e74c3c;
            color: white;
            width: 28px;
            height: 28px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 0;
        }

        .start-button, .stop-button {
            font-size: 0.85em;
            padding: 6px 10px;
        }

        .stop-button {
            background-color: #e74c3c;
        }

        .card-body {
            padding: 15px;
            position: relative;
        }

        .loading-indicator {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 10px;
            color: var(--text-secondary);
            font-style: italic;
        }

        /* 가격 섹션 */
        .price-section {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
        }

        .price-item {
            text-align: center;
            flex: 1;
        }

        .price-label {
            font-size: 0.9em;
            color: var(--text-secondary);
            margin-bottom: 5px;
        }

        .current-price {
            font-size: 1.4em;
            font-weight: bold;
        }

        .price-change-24h {
            font-weight: bold;
        }

        /* 기술적 지표 섹션 - 가로 배치 */
        .indicators-section {
            margin: 15px 0;
        }

        .indicators-title {
            font-weight: bold;
            margin-bottom: 8px;
        }

        .indicators-row {
            display: flex;
            gap: 10px;
            overflow-x: auto;
            padding-bottom: 5px;
        }

        .indicator-card {
            flex: 1;
            min-width: 120px;
            background-color: var(--bg-secondary);
            padding: 10px;
            border-radius: 6px;
        }

        .indicator-title {
            font-weight: 500;
            font-size: 0.9em;
            margin-bottom: 5px;
            color: var(--text-secondary);
        }

        .indicator-value {
            font-weight: bold;
        }

        /* 분석 결과 섹션 */
        .market-status-section, 
        .signal-strength-section, 
        .analysis-result-section {
            margin-top: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .market-status-label, 
        .signal-strength-label, 
        .result-label {
            color: var(--text-secondary);
            min-width: 120px;
        }

        .market-condition, 
        .signal-strength-value, 
        .result-value {
            font-weight: bold;
        }

        .signal-strength-bar-container {
            flex: 1;
            height: 10px;
            background-color: var(--bg-secondary);
            border-radius: 5px;
            overflow: hidden;
        }

        .signal-strength-bar {
            height: 100%;
            background-color: var(--accent-color);
            border-radius: 5px;
            transition: width 0.3s ease;
        }

        .analysis-message {
            margin-top: 15px;
            font-size: 0.9em;
            color: var(--text-secondary);
        }

        /* 상태 색상 */
        .positive {
            color: var(--positive-color);
        }

        .negative {
            color: var(--negative-color);
        }

        .neutral {
            color: var(--neutral-color);
        }

        .strong-buy {
            background-color: var(--positive-color);
        }

        .moderate-buy {
            background-color: var(--accent-color);
        }

        .weak-buy {
            background-color: var(--neutral-color);
        }

        /* 모의 거래 스타일 */
        .mock-trading-section {
            margin-top: 20px;
            border-top: 1px solid var(--border-color);
            padding-top: 15px;
        }

        .mock-trading-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .mock-trading-title {
            font-weight: bold;
        }

        /* 토글 스위치 스타일 */
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 40px;
            height: 20px;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: var(--border-color);
            transition: .4s;
            border-radius: 20px;
        }

        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 2px;
            bottom: 2px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .toggle-slider {
            background-color: var(--accent-color);
        }

        input:checked + .toggle-slider:before {
            transform: translateX(20px);
        }

        /* 슬라이더 스타일 */
        .signal-threshold-slider {
            -webkit-appearance: none;
            width: 100%;
            height: 8px;
            border-radius: 4px;
            background: var(--bg-secondary);
            outline: none;
        }

        .signal-threshold-slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background: var(--accent-color);
            cursor: pointer;
        }

        .signal-threshold-slider::-moz-range-thumb {
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background: var(--accent-color);
            cursor: pointer;
        }

        /* 거래 내역 테이블 스타일 */
        .trading-history-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.9em;
        }

        .trading-history-table th,
        .trading-history-table td {
            padding: 5px;
            border-bottom: 1px solid var(--border-color);
        }

        .trading-history-table th {
            text-align: left;
            font-weight: 500;
        }

        .trading-history-table .buy-action {
            color: var(--positive-color);
        }

        .trading-history-table .sell-action {
            color: var(--negative-color);
        }

        @media (max-width: 768px) {
            .form-container {
                grid-template-columns: 1fr;
            }
            
            .analysis-cards-container {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="analysis-form">
            <h2>암호화폐 시장 분석</h2>
            <div class="requirements-notice">
                <strong>서비스 요구사항:</strong>
                <ul>
                    <li>캐시 시스템 (Redis)</li>
                    <li>메시지 브로커 (Kafka)</li>
                </ul>
            </div>
            <div class="form-container">
                <div class="form-group">
                    <label for="exchange">거래소:</label>
                    <select id="exchange" required>
                        <option value="">거래소 선택</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="quoteCurrency">화폐:</label>
                    <select id="quoteCurrency" required disabled>
                        <option value="">화폐 선택</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="symbol">코인:</label>
                    <select id="symbol" required disabled>
                        <option value="">코인 선택</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="tradingStyle">트레이딩 스타일:</label>
                    <select id="tradingStyle">
                        <option value="SCALPING">초단타 (Scalping)</option>
                        <option value="DAY_TRADING">단타 (Day Trading)</option>
                        <option value="SWING">스윙 (Swing Trading)</option>
                    </select>
                </div>
                </div>
            <button id="startAnalysis">분석 시작</button>
            
            <div class="status-panel">
                <strong>시스템 상태:</strong>
                <div id="systemStatus" class="status-items">
                    <div class="status-item">Redis: <span id="redisStatus">확인 중...</span></div>
                    <div class="status-item">Kafka: <span id="kafkaStatus">확인 중...</span></div>
                    <div class="status-item">Service: <span id="serviceStatus">확인 중...</span></div>
                </div>
                </div>
        </div>

        <div class="analysis-results-section">
            <h2>분석 결과</h2>
            <div id="analysis-results" class="analysis-cards-container">
                <!-- 여기에 분석 결과 카드가 동적으로 추가됩니다 -->
            </div>
        </div>
    </div>

    <script>
        // API 기본 URL 설정
        const API_BASE_URL = window.location.protocol + '//' + window.location.host;
        let exchangeConfig = {};

        // 모든 DOM 요소가 로드된 후 스크립트 실행을 보장하는 함수
        document.addEventListener('DOMContentLoaded', function() {
            console.log('페이지 초기화');
            
            // 분석 결과 섹션이 없으면 생성
            if (!document.querySelector('.analysis-results-section')) {
                console.log('분석 결과 섹션 생성');
                const container = document.querySelector('.container');
                if (container) {
                    const analysisResultsSection = document.createElement('div');
                    analysisResultsSection.className = 'analysis-results-section';
                    analysisResultsSection.innerHTML = `
                        <h2>분석 결과</h2>
                        <div class="analysis-cards-container"></div>
                    `;
                    container.appendChild(analysisResultsSection);
                }
            }
            
            // 이벤트 리스너 연결
            const addButton = document.getElementById('startAnalysis');
            if (addButton) {
                addButton.addEventListener('click', addAnalysis);
                console.log('분석 시작 버튼 이벤트 리스너 설정됨');
            } else {
                console.error('분석 시작 버튼을 찾을 수 없습니다.');
            }
            
            // 거래소 목록 로드
            loadExchanges();
            
            // 테마 전환 리스너 설정 (있으면)
            const themeToggle = document.getElementById('themeToggle');
            if (themeToggle) {
                themeToggle.addEventListener('change', function() {
                    document.documentElement.setAttribute('data-theme', this.checked ? 'dark' : 'light');
                });
            }
            
            // CSS 스타일 확인 - 게이지바 스타일이 올바르게 적용되는지 확인
            const style = document.createElement('style');
            style.textContent = `
                .signal-strength-container {
                    width: 100%;
                    height: 10px;
                    background-color: var(--bg-secondary);
                    border-radius: 5px;
                    overflow: hidden;
                    margin-top: 5px;
                    display: block !important;
                }
                
                .signal-strength-bar {
                    height: 100%;
                    border-radius: 5px;
                    transition: width 0.3s ease;
                }
                
                .strong-buy {
                    background-color: var(--positive-color);
                }
                
                .moderate-buy {
                    background-color: var(--neutral-color);
                }
                
                .weak-buy {
                    background-color: var(--negative-color);
                }
            `;
            document.head.appendChild(style);
            console.log('게이지바 CSS 스타일 추가됨');
        });

        // 거래소 목록 로드
        async function loadExchanges() {
            try {
                console.log('거래소 목록 로드 시작');
                
                // 기존 코드에서 사용하던 API 경로 사용
                const response = await fetch(`${API_BASE_URL}/api/v1/config/supported-pairs`);
                console.log('API 응답:', response);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                
                const data = await response.json();
                console.log('받은 데이터:', data);
                
                const exchangeSelect = document.getElementById('exchange');
                if (!exchangeSelect) {
                    console.error('거래소 선택 엘리먼트를 찾을 수 없습니다!');
                    return;
                }
                
                // 기존 옵션 제거 (첫 번째 옵션 제외)
                while (exchangeSelect.options.length > 1) {
                    exchangeSelect.remove(1);
                }
                
                // 새 옵션 추가 (exchanges 객체 키 사용)
                if (data.exchanges) {
                    Object.keys(data.exchanges).forEach(exchange => {
                        const option = document.createElement('option');
                        option.value = exchange;
                        option.textContent = exchange;
                        exchangeSelect.appendChild(option);
                    });
                }
                
                // 거래소 변경 이벤트 핸들러 설정
                exchangeSelect.addEventListener('change', function() {
                    loadQuoteCurrencies(this.value, data);
                });
                
            } catch (error) {
                console.error('거래소 로드 오류:', error);
                alert('거래소 목록을 불러오는데 실패했습니다. 페이지를 새로고침하거나 나중에 다시 시도해주세요.');
                
                const exchangeSelect = document.getElementById('exchange');
                if (exchangeSelect) {
                    exchangeSelect.innerHTML = '<option value="">로드 실패 - 다시 시도하세요</option>';
                }
            }
        }

        // 화폐 목록 로드 (데이터를 파라미터로 받음)
        function loadQuoteCurrencies(exchange, data) {
            try {
                console.log('화폐 목록 로드:', exchange);
                if (!exchange || !data) {
                    return;
                }
                
                const quoteSelect = document.getElementById('quoteCurrency');
                const symbolSelect = document.getElementById('symbol');
                
                if (!quoteSelect || !symbolSelect) {
                    console.error('select 요소를 찾을 수 없습니다');
                    return;
                }
                
                // 화폐와 코인 선택 비활성화
                quoteSelect.disabled = true;
                symbolSelect.disabled = true;
                
                // 기본 옵션으로 재설정
                quoteSelect.innerHTML = '<option value="">화폐 선택</option>';
                symbolSelect.innerHTML = '<option value="">화폐를 먼저 선택하세요</option>';
                
                // 선택된 거래소의 지원 화폐 목록
                const currencies = data.exchanges[exchange];
                console.log('화폐 데이터:', currencies);
                
                if (currencies && currencies.length > 0) {
                    // 화폐는 일반적으로 KRW, BTC, USDT 등입니다.
                    // 각 거래소마다 다를 수 있음
                    const uniqueCurrencies = [...new Set(currencies)];
                    
                    uniqueCurrencies.forEach(currency => {
                        const option = document.createElement('option');
                        option.value = currency;
                        option.textContent = currency;
                        quoteSelect.appendChild(option);
                    });
                }
                
                // 화폐 선택 활성화
                quoteSelect.disabled = false;
                
                // 화폐 변경 이벤트 핸들러 설정
                quoteSelect.addEventListener('change', function() {
                    loadSymbols(exchange, this.value, data);
                });
                
            } catch (error) {
                console.error('화폐 목록 처리 오류:', error);
                
                const quoteSelect = document.getElementById('quoteCurrency');
                if (quoteSelect) {
                    quoteSelect.innerHTML = '<option value="">처리 오류</option>';
                    quoteSelect.disabled = false;
                }
            }
        }

        // 코인 목록 로드 (데이터를 파라미터로 받음)
        function loadSymbols(exchange, quoteCurrency, data) {
            try {
                console.log('코인 목록 로드:', exchange, quoteCurrency);
                if (!exchange || !quoteCurrency || !data) {
                return;
            }
            
                const symbolSelect = document.getElementById('symbol');
                
                if (!symbolSelect) {
                    console.error('symbol select 요소를 찾을 수 없습니다');
                    return;
                }
                
                // 코인 선택 비활성화
                symbolSelect.disabled = true;
                symbolSelect.innerHTML = '<option value="">코인 선택</option>';
                
                // 공통 지원 심볼 데이터
                const symbols = data.symbols || [];
                console.log('심볼 데이터:', symbols);
                
                if (symbols && symbols.length > 0) {
                    symbols.forEach(symbol => {
                        const option = document.createElement('option');
                        option.value = symbol;
                        option.textContent = symbol;
                        symbolSelect.appendChild(option);
                    });
                }
                
                // 코인 선택 활성화
                symbolSelect.disabled = false;
                
                } catch (error) {
                console.error('코인 목록 처리 오류:', error);
                
                const symbolSelect = document.getElementById('symbol');
                if (symbolSelect) {
                    symbolSelect.innerHTML = '<option value="">처리 오류</option>';
                    symbolSelect.disabled = false;
                }
            }
        }

        // 분석 카드 생성
        function createAnalysisCard(exchange, currencyPair, symbol, quoteCurrency, displayPair) {
            console.log('카드 생성:', exchange, currencyPair, symbol, quoteCurrency, displayPair);
            
            const card = document.createElement('div');
            card.className = 'analysis-card';
            card.id = `${exchange}-${currencyPair}`.toLowerCase();
            
            // 카드 내용 설정 - HTML 구조 확인 필요
            card.innerHTML = `
                <div class="card-header">
                    <h3>${exchange} - ${displayPair}</h3>
                    <div class="card-actions">
                        <button class="start-button">시작</button>
                        <button class="stop-button" style="display: none;">중지</button>
                        <button class="retry-button" style="display: none;">재시도</button>
                        <button class="delete-button">삭제</button>
                </div>
                    </div>
                <div class="loading-indicator" style="display: none;">
                    <div class="spinner"></div>
                    <span>분석 데이터 로딩 중...</span>
                    </div>
                <div class="card-content">
                    <div class="price-section">
                        <div class="current-price">-</div>
                        <div class="price-change neutral">-</div>
                    </div>
                    <div class="indicators-section">
                        <div class="indicator-item">
                            <div class="indicator-label">이동평균선:</div>
                            <div class="indicator-value sma-signal neutral">대기중</div>
                    </div>
                        <div class="indicator-item">
                            <div class="indicator-label">RSI:</div>
                            <div class="indicator-value rsi-value neutral">-</div>
                    </div>
                        <div class="indicator-item">
                            <div class="indicator-label">볼린저밴드:</div>
                            <div class="indicator-value bb-signal neutral">대기중</div>
                    </div>
                        <div class="indicator-item">
                            <div class="indicator-label">거래량변화:</div>
                            <div class="indicator-value volume-signal neutral">-</div>
                    </div>
                </div>
                    <div class="market-section">
                        <div class="market-label">시장상태:</div>
                        <div class="market-condition neutral">대기중</div>
                    </div>
                    <div class="signal-section">
                        <div class="signal-strength-label">매수신호강도:</div>
                        <div class="signal-strength-value">0.0%</div>
                        <div class="signal-strength-container">
                            <div class="signal-strength-bar weak-buy" style="width: 0%;"></div>
                        </div>
                    </div>
                    <div class="result-section">
                        <div class="result-label">분석결과:</div>
                        <div class="result-value neutral">대기중</div>
                    </div>
                    <div class="message-section">
                        <div class="analysis-message">분석이 시작되면 여기에 결과가 표시됩니다.</div>
                    </div>
                    
                    <!-- 모의 거래 섹션 -->
                    <div class="mock-trading-section">
                        <div class="mock-trading-header">
                            <div class="mock-trading-title">모의 거래</div>
                            <label class="toggle-switch">
                                <input type="checkbox" class="mock-trading-toggle">
                                <span class="toggle-slider"></span>
                            </label>
                        </div>
                        
                        <div class="mock-trading-settings" style="display: none;">
                            <div class="setting-item">
                                <label style="display: flex; align-items: center;">
                                    <input type="checkbox" class="auto-trading-toggle">
                                    <span>자동 거래 활성화</span>
                                </label>
                            </div>
                            
                            <div class="setting-item">
                                <div style="display: flex; justify-content: space-between;">
                                    <span>매수 신호 강도 기준값</span>
                                    <span class="signal-threshold-value">50%</span>
                                </div>
                                <input type="range" class="signal-threshold-slider" min="0" max="100" value="50">
                            </div>
                        </div>
                        
                        <div class="mock-trading-history" style="display: none;">
                            <div style="font-weight: bold; margin-bottom: 8px;">거래 내역</div>
                            <table class="trading-history-table">
                                <thead>
                                    <tr>
                                        <th>시간</th>
                                        <th style="text-align: right;">가격</th>
                                        <th style="text-align: right;">신호강도</th>
                                        <th style="text-align: center;">액션</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td colspan="4" style="text-align: center; padding: 10px;">거래 내역이 없습니다.</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            `;

            // 이벤트 리스너 설정
            const startBtn = card.querySelector('.start-button');
            const stopBtn = card.querySelector('.stop-button');
            const retryBtn = card.querySelector('.retry-button');
            const deleteBtn = card.querySelector('.delete-button');
            
            startBtn.addEventListener('click', function() {
                startAnalysis(exchange, currencyPair, symbol, quoteCurrency, card);
            });
            
            stopBtn.addEventListener('click', function() {
                stopAnalysis(exchange, currencyPair, symbol, quoteCurrency, card);
            });
            
            retryBtn.addEventListener('click', function() {
                // 재시도 시 재시도 버튼 숨기고 시작 버튼 표시
                retryBtn.style.display = 'none';
                startAnalysis(exchange, currencyPair, symbol, quoteCurrency, card);
            });
            
            deleteBtn.addEventListener('click', function() {
                deleteAnalysisCard(exchange, currencyPair, symbol, quoteCurrency, card);
            });
            
            // 모의 거래 초기화
            initMockTrading(card, exchange, currencyPair, symbol, quoteCurrency);
            
            return card;
        }

        // 분석 결과로 카드 업데이트
        function updateCardWithAnalysisResult(card, data) {
            console.log('카드 업데이트 시작 - 데이터:', data);
            
            try {
                // 로딩 인디케이터 강제로 숨기기
                const loadingIndicator = card.querySelector('.loading-indicator');
                if (loadingIndicator) {
                    loadingIndicator.style.display = 'none';
                    console.log('로딩 인디케이터 숨김');
                }
                
                // 가격 정보 업데이트
                const priceValue = card.querySelector('.current-price');
                if (priceValue && data.currentPrice !== undefined) {
                    priceValue.textContent = formatPrice(data.currentPrice);
                    console.log('가격 업데이트:', data.currentPrice);
                }
                
                // 가격 변화 업데이트
                const priceChange = card.querySelector('.price-change');
                if (priceChange && data.priceChangePercent !== undefined) {
                    const changeValue = data.priceChangePercent;
                    priceChange.textContent = formatPercent(changeValue);
                    priceChange.className = 'price-change ' + (changeValue > 0 ? 'positive' : changeValue < 0 ? 'negative' : 'neutral');
                    console.log('가격 변화 업데이트:', changeValue);
                }
                
                // 이동 평균선 신호 업데이트
                const smaSignal = card.querySelector('.sma-signal');
                if (smaSignal) {
                    const signalValue = data.smaSignal || 'NEUTRAL';
                    smaSignal.textContent = signalValue;
                    smaSignal.className = 'indicator-value sma-signal ' + 
                        (signalValue === 'BULLISH' || signalValue === 'MODERATELY_BULLISH' || signalValue === 'SLIGHTLY_BULLISH' ? 'positive' : 
                         signalValue === 'BEARISH' || signalValue === 'MODERATELY_BEARISH' || signalValue === 'SLIGHTLY_BEARISH' ? 'negative' : 'neutral');
                    console.log('SMA 신호 업데이트:', signalValue);
                }
                
                // RSI 값 업데이트
                const rsiValue = card.querySelector('.rsi-value');
                if (rsiValue && data.rsiValue !== undefined) {
                    rsiValue.textContent = data.rsiValue.toFixed(1);
                    rsiValue.className = 'indicator-value rsi-value ' + 
                        (data.rsiSignal === 'OVERSOLD' ? 'positive' : 
                         data.rsiSignal === 'OVERBOUGHT' ? 'negative' : 'neutral');
                    console.log('RSI 값 업데이트:', data.rsiValue);
                }
                
                // 볼린저 밴드 신호 업데이트
                const bbSignal = card.querySelector('.bb-signal');
                if (bbSignal) {
                    const signalValue = data.bollingerSignal || 'INSIDE';
                    bbSignal.textContent = signalValue;
                    bbSignal.className = 'indicator-value bb-signal ' + 
                        (signalValue === 'LOWER_TOUCH' ? 'positive' : 
                         signalValue === 'UPPER_TOUCH' ? 'negative' : 'neutral');
                    console.log('볼린저 밴드 신호 업데이트:', signalValue);
                }
                
                // 거래량 신호 업데이트
                const volumeSignal = card.querySelector('.volume-signal');
                if (volumeSignal && data.volumeChangePercent !== undefined) {
                    volumeSignal.textContent = formatPercent(data.volumeChangePercent);
                    
                    let volumeClass = 'neutral';
                    if (data.volumeChangePercent > 20) {
                        volumeClass = 'positive';
                    } else if (data.volumeChangePercent < -20) {
                        volumeClass = 'negative';
                    }
                    
                    volumeSignal.className = 'indicator-value volume-signal ' + volumeClass;
                    console.log('거래량 변화 업데이트:', data.volumeChangePercent);
                }
                
                // 시장 상태 업데이트 - RSI 기반 보완
                const marketCondition = card.querySelector('.market-condition');
                if (marketCondition) {
                    let condition = data.marketCondition || 'NEUTRAL';
                    
                    // 시장 상태 텍스트 설정
                    let conditionText = condition;
                    if (condition === 'OVERSOLD') {
                        conditionText = '과매도 상태';
                    } else if (condition === 'OVERBOUGHT') {
                        conditionText = '과매수 상태';
                    } else if (condition === 'NEUTRAL') {
                        conditionText = '중립 상태';
                    }
                    
                    marketCondition.textContent = conditionText;
                    marketCondition.className = 'market-condition ' + 
                        (condition === 'OVERSOLD' ? 'positive' : 
                         condition === 'OVERBOUGHT' ? 'negative' : 'neutral');
                    console.log('시장 상태 업데이트:', conditionText);
                }
                
                // 매수 신호 강도 업데이트 - 메시지 파싱 보완
                const signalStrengthValue = card.querySelector('.signal-strength-value');
                const signalStrengthBar = card.querySelector('.signal-strength-bar');
                
                if (signalStrengthValue && signalStrengthBar) {
                    let strength = data.buySignalStrength || 0;
                    
                    // 값이 있을 때만 업데이트
                    if (strength > 0) {
                        signalStrengthValue.textContent = strength.toFixed(1) + '%';
                        signalStrengthBar.style.width = strength + '%';
                        
                        // 강도에 따른 색상 설정
                        if (strength >= 70) {
                            signalStrengthBar.className = 'signal-strength-bar strong-buy';
                        } else if (strength >= 50) {
                            signalStrengthBar.className = 'signal-strength-bar moderate-buy';
            } else {
                            signalStrengthBar.className = 'signal-strength-bar weak-buy';
                        }
                        
                        console.log('매수 신호 강도 업데이트:', strength + '%');
                    }
                }
                
                // 분석 결과 업데이트
                const resultValue = card.querySelector('.result-value');
                if (resultValue && data.analysisResult) {
                    const result = data.analysisResult;
                    resultValue.textContent = result;
                    resultValue.className = 'result-value ' + 
                        (result === 'BUY' || result === 'STRONG_BUY' ? 'positive' : 
                         result === 'SELL' || result === 'STRONG_SELL' ? 'negative' : 'neutral');
                    console.log('분석 결과 업데이트:', result);
                }
                
                // 메시지 업데이트
                const messageElement = card.querySelector('.analysis-message');
                if (messageElement && data.message) {
                    messageElement.textContent = data.message;
                    console.log('메시지 업데이트:', data.message);
                }
                
                console.log('카드 업데이트 완료');
                
                // 카드 ID에서 거래소와 통화쌍 추출
                const cardId = card.id;
                const parts = cardId.split('-');
                if (parts.length >= 2) {
                    const exchange = parts[0];
                    const currencyPair = parts.slice(1).join('-');
                    
                    // 자동 거래 활성화 여부 확인
                    const autoTradingCheckbox = card.querySelector('.auto-trading-toggle');
                    if (autoTradingCheckbox && autoTradingCheckbox.checked) {
                        // 자동 거래 실행
                        executeMockTrade(card, data);
                    }
                }
            } catch (error) {
                console.error('카드 업데이트 중 오류:', error);
            }
        }

        // 분석 시작
        function startAnalysis(exchange, currencyPair, symbol, quoteCurrency, card) {
            console.log('분석 시작:', exchange, currencyPair);
            
            try {
                // 웹소켓 연결이 이미 있는지 확인
                if (card.websocket && card.websocket.readyState === WebSocket.OPEN) {
                    console.log('이미 웹소켓 연결이 있습니다. 기존 연결을 사용합니다.');
                    return;
                }
                
                // 로딩 표시 시작
                const loadingIndicator = card.querySelector('.loading-indicator');
                if (loadingIndicator) {
                    loadingIndicator.style.display = 'flex';
                }
                
                // 시작 버튼 숨기고 중지 버튼 표시
                const startButton = card.querySelector('.start-button');
                const stopButton = card.querySelector('.stop-button');
                if (startButton && stopButton) {
                    startButton.style.display = 'none';
                    stopButton.style.display = 'inline-block';
                }
                
                // 선택된 트레이딩 스타일 가져오기
                const tradingStyleSelect = document.getElementById('tradingStyle');
                const tradingStyle = tradingStyleSelect ? tradingStyleSelect.value : 'DAY_TRADING';
                console.log('선택된 트레이딩 스타일:', tradingStyle);
                
                // 웹소켓 연결 설정
                const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                const wsUrl = `${wsProtocol}//${window.location.host}/ws/analysis`;
                
                console.log('웹소켓 연결 URL:', wsUrl);
                
                const ws = new WebSocket(wsUrl);
                card.websocket = ws;
                
                ws.onopen = function() {
                    console.log('웹소켓 연결 성공!');
                    
                    // 분석 시작 명령 전송
                    const startRequest = {
                command: 'start',
                data: {
                    exchange: exchange,
                    currencyPair: currencyPair,
                            symbol: symbol,
                            quoteCurrency: quoteCurrency,
                            tradingStyle: tradingStyle
                        }
                    };
                    
                    ws.send(JSON.stringify(startRequest));
                    console.log('분석 시작 요청 전송됨:', startRequest);
                };
                
                ws.onmessage = function(event) {
                    try {
                        const data = JSON.parse(event.data);
                        console.log('분석 데이터 수신 (원본):', data);
                        
                        // 로딩 표시 숨기기
                        const loadingIndicator = card.querySelector('.loading-indicator');
                        if (loadingIndicator) {
                            loadingIndicator.style.display = 'none';
                        }
                        
                        // 에러 체크 - 백엔드 에러 메시지 처리
                        if (data.error) {
                            console.error('백엔드 에러 발생:', data.error, data.details);
                            
                            // 에러 메시지 표시
                            const messageElement = card.querySelector('.analysis-message');
                            if (messageElement) {
                                messageElement.textContent = `분석 중 오류 발생: ${data.error}`;
                                messageElement.style.color = 'var(--negative-color)';
                            }
                            
                            // 결과 값 에러로 표시
                            const resultValue = card.querySelector('.result-value');
                            if (resultValue) {
                                resultValue.textContent = 'ERROR';
                                resultValue.className = 'result-value negative';
                            }
                            
                            // 시작 버튼 표시, 중지 버튼 숨기기
                            const startButton = card.querySelector('.start-button');
                            const stopButton = card.querySelector('.stop-button');
                            if (startButton && stopButton) {
                                startButton.style.display = 'inline-block';
                                stopButton.style.display = 'none';
                            }
                            
                            return; // 추가 처리 중단
                        }
                        
                        // 정상 데이터 처리
                        if (data) {
                            // 데이터 객체 복사 및 필드 확인
                            const analysisData = { ...data };
                            
                            // 누락된 필드에 기본값 설정
                            if (analysisData.smaSignal === undefined || analysisData.smaSignal === null) {
                                analysisData.smaSignal = 'NEUTRAL';
                            }
                            
                            // 시장 상태가 null이면 RSI 신호를 기반으로 설정
                            if (analysisData.marketCondition === undefined || analysisData.marketCondition === null) {
                                if (analysisData.rsiSignal === 'OVERSOLD') {
                                    analysisData.marketCondition = 'OVERSOLD';
                                } else if (analysisData.rsiSignal === 'OVERBOUGHT') {
                                    analysisData.marketCondition = 'OVERBOUGHT';
                                } else {
                                    analysisData.marketCondition = 'NEUTRAL';
                                }
                                console.log('시장 상태 자동 설정:', analysisData.marketCondition);
                            }
                            
                            // 매수 신호 강도가 0이거나 null이면 메시지에서 추출
                            if ((analysisData.buySignalStrength === undefined || analysisData.buySignalStrength === 0 || analysisData.buySignalStrength === null) && analysisData.message) {
                                const match = analysisData.message.match(/매수 신호 강도: (\d+\.?\d*)%/);
                                if (match && match[1]) {
                                    analysisData.buySignalStrength = parseFloat(match[1]);
                                    console.log('메시지에서 매수 신호 강도 추출:', analysisData.buySignalStrength);
                                }
                            }
                            
                            // 트레이딩 스타일이 null이면 메시지에서 추출
                            if ((analysisData.tradingStyle === undefined || analysisData.tradingStyle === null) && analysisData.message) {
                                const match = analysisData.message.match(/트레이딩 스타일: (\w+)/);
                                if (match && match[1]) {
                                    const styleMap = {
                                        '초단타': 'SCALPING',
                                        '단타': 'DAY_TRADING',
                                        '스윙': 'SWING'
                                    };
                                    analysisData.tradingStyle = styleMap[match[1]] || 'DAY_TRADING';
                                    console.log('메시지에서 트레이딩 스타일 추출:', match[1], '->', analysisData.tradingStyle);
                                }
                            }
                            
                            console.log('처리된 분석 데이터:', analysisData);
                            
                            // 카드 업데이트
                            updateCardWithAnalysisResult(card, analysisData);
                        }
                } catch (error) {
                        console.error('메시지 처리 중 오류:', error);
                        
                        // 오류 발생해도 로딩 숨기기
                        const loadingIndicator = card.querySelector('.loading-indicator');
                        if (loadingIndicator) {
                            loadingIndicator.style.display = 'none';
                        }
                        
                        // 에러 메시지 표시
                        const messageElement = card.querySelector('.analysis-message');
                        if (messageElement) {
                            messageElement.textContent = '데이터 처리 중 오류가 발생했습니다. 다시 시도해 주세요.';
                            messageElement.style.color = 'var(--negative-color)';
                        }
                        
                        // 시작 버튼 복원
                        const startButton = card.querySelector('.start-button');
                        const stopButton = card.querySelector('.stop-button');
                        if (startButton && stopButton) {
                            startButton.style.display = 'inline-block';
                            stopButton.style.display = 'none';
                        }
                    }
                };
                
                ws.onclose = function() {
                    console.log('웹소켓 연결 종료');
                    
                    // 시작 버튼 표시하고 중지 버튼 숨기기
                    if (startButton && stopButton) {
                        startButton.style.display = 'inline-block';
                        stopButton.style.display = 'none';
                    }
                    
                    // 로딩 표시 숨기기
                    if (loadingIndicator) {
                        loadingIndicator.style.display = 'none';
                    }
                };
                
                ws.onerror = function(error) {
                    console.error('웹소켓 오류:', error);
                    alert('분석 연결 중 오류가 발생했습니다. 다시 시도해주세요.');
                    
                    // 시작 버튼 표시하고 중지 버튼 숨기기
                    if (startButton && stopButton) {
                        startButton.style.display = 'inline-block';
                        stopButton.style.display = 'none';
                    }
                    
                    // 로딩 표시 숨기기
                    if (loadingIndicator) {
                        loadingIndicator.style.display = 'none';
                    }
                };
                
            } catch (error) {
                console.error('분석 시작 중 오류:', error);
            }
        }

        // 분석 중지
        function stopAnalysis(exchange, currencyPair, symbol, quoteCurrency, card) {
            if (card.websocket) {
                const request = {
                    command: 'stop',
                    data: {
                        exchange: exchange,
                        currencyPair: currencyPair,
                        symbol: symbol,
                        quoteCurrency: quoteCurrency
                    }
                };
                
                card.websocket.send(JSON.stringify(request));
                card.websocket.close();
                card.websocket = null;
            }
            
            card.querySelector('.start-button').style.display = 'block';
            card.querySelector('.stop-button').style.display = 'none';
        }

        // 분석 카드 삭제
        function deleteAnalysisCard(exchange, currencyPair, symbol, quoteCurrency, card) {
            console.log('카드 삭제:', exchange, currencyPair);
            
            if (card.websocket) {
                try {
                    const stopRequest = {
                        command: 'stop',
                        data: {
                            exchange: exchange,
                            currencyPair: currencyPair,
                            symbol: symbol,
                            quoteCurrency: quoteCurrency
                        }
                    };
                    
                    card.websocket.send(JSON.stringify(stopRequest));
                    card.websocket.close();
                    card.websocket = null;
                } catch (error) {
                    console.error('분석 중지 중 오류:', error);
                }
            }

            fetch(`${API_BASE_URL}/api/analysis/stop`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    exchange: exchange,
                    currencyPair: currencyPair
                })
            }).catch(error => {
                console.error('백엔드에 중지 요청 중 오류:', error);
            });

            card.remove();
        }

        // 가격 형식화
        function formatPrice(price) {
            if (price === undefined || price === null) {
                return '-';
            }
            
            // 작은 값일 경우 과학적 표기법 대신 소수점 표기
            if (price < 0.0001) {
                return price.toFixed(8);
            } else if (price < 0.01) {
                return price.toFixed(6);
            } else if (price < 1) {
                return price.toFixed(4);
            } else if (price < 1000) {
                return price.toFixed(2);
            } else {
                return price.toLocaleString('ko-KR', {
                    maximumFractionDigits: 0
                });
            }
        }
        
        // 퍼센트 형식화
        function formatPercent(value) {
            if (value === undefined || value === null) {
                return '-';
            }
            
            // 소수점 1자리까지 표시 (퍼센트 기호 추가)
            return value.toFixed(1) + '%';
        }

        // 분석 추가 함수 - 수정
        function addAnalysis() {
            console.log('분석 추가 시작');
            
            const exchange = document.getElementById('exchange').value;
            const symbol = document.getElementById('symbol').value;
            const quoteCurrency = document.getElementById('quoteCurrency').value;
            
            if (!exchange || !quoteCurrency || !symbol) {
                alert('거래소, 화폐, 코인을 모두 선택해주세요.');
                return;
            }
            
            // currencyPair 구성 (거래소마다 다를 수 있음)
            // 일반적으로 BASE-QUOTE 또는 QUOTE-BASE 형식 사용
            const currencyPair = `${quoteCurrency}-${symbol}`;
            
            console.log('추가할 분석:', exchange, currencyPair, symbol, quoteCurrency);
            
            // 이미 같은 분석이 존재하는지 확인
            const cardId = `${exchange}-${currencyPair}`.toLowerCase();
            if (document.getElementById(cardId)) {
                alert('이미 같은 분석이 추가되어 있습니다.');
                return;
            }
            
            // 화폐쌍 표시 형식
            const displayPair = `${symbol}/${quoteCurrency}`;
            
            // 카드 생성
            const card = createAnalysisCard(exchange, currencyPair, symbol, quoteCurrency, displayPair);
            
            // 카드 컨테이너 확인 및 카드 추가
            const container = document.querySelector('.analysis-cards-container');
            if (!container) {
                console.error('분석 카드 컨테이너를 찾을 수 없습니다.');
                
                // 컨테이너 없으면 생성
                const resultsSection = document.querySelector('.analysis-results-section');
                if (resultsSection) {
                    const newContainer = document.createElement('div');
                    newContainer.className = 'analysis-cards-container';
                    resultsSection.appendChild(newContainer);
                    newContainer.appendChild(card);
                    console.log('새 컨테이너 생성 및 카드 추가됨');
                } else {
                    alert('분석 결과를 표시할 영역을 찾을 수 없습니다.');
                }
            } else {
                // 컨테이너에 카드 추가
                container.appendChild(card);
                console.log('카드가 컨테이너에 추가됨');
            }
            
            // 분석 바로 시작
            startAnalysis(exchange, currencyPair, symbol, quoteCurrency, card);
            
            // 선택 초기화
            document.getElementById('symbol').selectedIndex = 0;
        }

        // 모의 거래 관련 코드 시작
        // 모의 거래 상태 저장 객체
        const mockTradingState = {};

        // 모의 거래 초기화 함수
        function initMockTrading(card, exchange, currencyPair, symbol, quoteCurrency) {
            const cardId = `${exchange}-${currencyPair}`.toLowerCase();
            
            // 상태 초기화
            mockTradingState[cardId] = {
                enabled: false,
                autoTrading: false,
                signalThreshold: 50,
                history: [],
                balance: {
                    fiat: 1000000, // 초기 법정화폐 잔액 (예: 100만원)
                    crypto: 0      // 초기 암호화폐 잔액
                },
                lastPrice: 0,
                lastAction: null
            };
            
            // 토글 버튼 이벤트 리스너
            const mockTradingToggle = card.querySelector('.mock-trading-toggle');
            const mockTradingSettings = card.querySelector('.mock-trading-settings');
            const mockTradingHistory = card.querySelector('.mock-trading-history');
            
            mockTradingToggle.addEventListener('change', function() {
                const isEnabled = this.checked;
                mockTradingState[cardId].enabled = isEnabled;
                
                // 설정 패널과 거래 내역 표시/숨김
                mockTradingSettings.style.display = isEnabled ? 'block' : 'none';
                mockTradingHistory.style.display = isEnabled ? 'block' : 'none';
                
                console.log(`모의 거래 ${isEnabled ? '활성화' : '비활성화'}: ${cardId}`);
            });
            
            // 자동 거래 토글 이벤트 리스너
            const autoTradingToggle = card.querySelector('.auto-trading-toggle');
            autoTradingToggle.addEventListener('change', function() {
                mockTradingState[cardId].autoTrading = this.checked;
                console.log(`자동 거래 ${this.checked ? '활성화' : '비활성화'}: ${cardId}`);
            });
            
            // 신호 강도 슬라이더 이벤트 리스너
            const signalThresholdSlider = card.querySelector('.signal-threshold-slider');
            const signalThresholdValue = card.querySelector('.signal-threshold-value');
            
            signalThresholdSlider.addEventListener('input', function() {
                const threshold = parseInt(this.value);
                mockTradingState[cardId].signalThreshold = threshold;
                signalThresholdValue.textContent = `${threshold}%`;
            });
            
            console.log(`모의 거래 초기화 완료: ${cardId}`);
        }

        // 모의 거래 실행 함수
        function executeMockTrade(card, data) {
            const cardId = card.id;
            const state = mockTradingState[cardId];
            
            // 모의 거래가 활성화되지 않았으면 종료
            if (!state || !state.enabled) {
                return;
            }
            
            // 현재 가격 가져오기
            const currentPrice = data.currentPrice;
            if (!currentPrice) {
                console.log('가격 정보가 없어 모의 거래를 실행할 수 없습니다.');
                return;
            }
            
            // 마지막 가격 업데이트
            state.lastPrice = currentPrice;
            
            // 자동 거래가 활성화되지 않았으면 종료
            if (!state.autoTrading) {
                return;
            }
            
            // 매수 신호 강도 확인
            let buySignalStrength = 0;
            
            // 1. 직접적인 buySignalStrength 값 확인
            if (data.buySignalStrength !== undefined && data.buySignalStrength !== null && data.buySignalStrength > 0) {
                buySignalStrength = data.buySignalStrength;
            } 
            // 2. 메시지에서 강도 추출 시도
            else if (data.message) {
                const match = data.message.match(/매수 신호 강도: (\d+\.?\d*)%/);
                if (match && match[1]) {
                    buySignalStrength = parseFloat(match[1]);
                }
            }
            
            console.log(`매수 신호 강도: ${buySignalStrength}%, 기준값: ${state.signalThreshold}%`);
            
            // 거래 결정
            let action = null;
            
            // 매수 신호 강도가 기준값보다 높으면 매수
            if (buySignalStrength >= state.signalThreshold && state.balance.fiat > 0) {
                // 매수 금액 계산 (잔액의 10%)
                const buyAmount = state.balance.fiat * 0.1;
                const cryptoAmount = buyAmount / currentPrice;
                
                // 잔액 업데이트
                state.balance.fiat -= buyAmount;
                state.balance.crypto += cryptoAmount;
                
                action = 'BUY';
                state.lastAction = action;
                
                console.log(`매수 실행: ${buyAmount.toLocaleString('ko-KR')}원, ${cryptoAmount.toFixed(8)} ${symbol}`);
            }
            // 매수 신호 강도가 기준값의 절반 미만이고 보유 암호화폐가 있으면 매도
            else if (buySignalStrength < state.signalThreshold / 2 && state.balance.crypto > 0) {
                // 매도 금액 계산 (보유량의 50%)
                const sellCryptoAmount = state.balance.crypto * 0.5;
                const sellAmount = sellCryptoAmount * currentPrice;
                
                // 잔액 업데이트
                state.balance.fiat += sellAmount;
                state.balance.crypto -= sellCryptoAmount;
                
                action = 'SELL';
                state.lastAction = action;
                
                console.log(`매도 실행: ${sellCryptoAmount.toFixed(8)} ${symbol}, ${sellAmount.toLocaleString('ko-KR')}원`);
            }
            
            // 거래 내역 추가
            if (action) {
                const tradeRecord = {
                    timestamp: new Date(),
                    price: currentPrice,
                    signalStrength: buySignalStrength,
                    action: action
                };
                
                state.history.unshift(tradeRecord); // 최신 거래를 앞에 추가
                
                // 최대 5개 거래 내역만 유지
                if (state.history.length > 5) {
                    state.history.pop();
                }
                
                // 거래 내역 테이블 업데이트
                updateTradingHistoryTable(card, state.history);
            }
        }

        // 거래 내역 테이블 업데이트 함수
        function updateTradingHistoryTable(card, history) {
            const tableBody = card.querySelector('.trading-history-table tbody');
            if (!tableBody) {
                console.error('거래 내역 테이블을 찾을 수 없습니다.');
                return;
            }
            
            // 테이블 내용 초기화
            tableBody.innerHTML = '';
            
            // 거래 내역이 없으면 메시지 표시
            if (history.length === 0) {
                const row = document.createElement('tr');
                row.innerHTML = `<td colspan="4" style="text-align: center; padding: 10px;">거래 내역이 없습니다.</td>`;
                tableBody.appendChild(row);
                return;
            }
            
            // 거래 내역 행 추가
            history.forEach(record => {
                const row = document.createElement('tr');
                
                // 시간 형식화
                const time = record.timestamp.toLocaleTimeString('ko-KR', {
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit'
                });
                
                // 액션 클래스 결정
                const actionClass = record.action === 'BUY' ? 'buy-action' : 'sell-action';
                const actionText = record.action === 'BUY' ? '매수' : '매도';
                
                row.innerHTML = `
                    <td>${time}</td>
                    <td style="text-align: right;">${formatPrice(record.price)}</td>
                    <td style="text-align: right;">${formatPercent(record.signalStrength)}</td>
                    <td style="text-align: center;" class="${actionClass}">${actionText}</td>
                `;
                
                tableBody.appendChild(row);
            });
        }

        // 모의 거래 관련 코드 끝
    </script>
    
    <!-- 유틸리티 스크립트 -->
    <script src="analysis-src/js/utils/formatters.js"></script>
    
    <!-- 컴포넌트 스크립트 -->
    <script src="analysis-src/js/components/card.js"></script>
    
    <!-- 서비스 스크립트 -->
    <script src="analysis-src/js/services/websocket.js"></script>
</body>
</html> 